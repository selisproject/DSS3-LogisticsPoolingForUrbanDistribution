// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).
namespace DSS3_LogisticsPoolingForUrbanDistribution.BO {
export class Domain_LocalResourcesDefinition  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Domain_LocalResourcesDefinition";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
    }
OrdersBO_Res_ASSOC_CustomVolume_ShippingOrder_PlannedVolume:
    any;
OrdersBO_Res_ASSOC_CustomVolume_ShippingOrder_ActualVolume:
    any;
Order_Res_ASSOC_Warehouse_GeoCoordinates_GeoCoordinates_Warehouse:
    any;
Order_Res_ASSOC_Warehouse_RegionalAgentsService_RegionalAgent_WarehousesSupport:
    any;
RegionalAgent_Res_ASSOC_RegionalAgent_AddressCoordinates_GeoCoordinates_RegionalAgent:
    any;
RegionalAgent_Res_ASSOC_RegionalAgent_AreaSupport_GeoArea_RegionalAgent:
    any;
ScheduledRoutes_Res_ASSOC_RegionalAgent_ScheduledRouteTemplates_ScheduledRouteTemplate_Owner:
    any;
}

export class Shipment  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.ShippingOrders = [];
        this.ShipmentStatus = [];
        this.AcceptedConditions = [];
        this.Path = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Owner:
    any;
DepartureTime:
    any;
CurrentStatus:
    any;
Temperature:
    any;
LoadPercentage:
    any;
TotalVolume:
    any;
AverageVolume:
    any;
MaxTravelTime:
    any;
ShippingOrders:
    any;
ShipmentStatus:
    any;
DeparturePoint:
    any;
FinalDestination:
    any;
Driver:
    any;
OccupiedVolume:
    any;
AcceptedConditions:
    any;
VehiculeType:
    any;
Path:
    any;
    static setShippingOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.ShippingOrders == null) $this.ShippingOrders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ShippingOrders.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.removeShippingOrders($this, $this.ShippingOrders[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.addManyShippingOrders($this, copyItems);
    }
    static addManyShippingOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.addShippingOrders($this, items[i]);
        }
    }
    static addShippingOrders = ($this, item) => {
        if ($this.ShippingOrders == null) $this.ShippingOrders = [];
        if (item == null || $this.ShippingOrders.indexOf(item) > -1) return;
        $this.ShippingOrders.push(item);
        ShippingOrder.addShipment(item, $this);
    }
    static addRangeShippingOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.addShippingOrders($this, item));
    }
    static removeShippingOrders = ($this, item) => {
        if ($this == null || $this.ShippingOrders == null || $this.ShippingOrders.indexOf(item) === -1) return;
        var _index = $this.ShippingOrders.indexOf(item);
        $this.ShippingOrders.splice(_index, 1);
        ShippingOrder.removeShipment(item, $this);
    }
    static clearShippingOrders = ($this) => {
        $this.ShippingOrders = null;
    }
    static setShipmentStatus = ($this, items) => {
        if (items == null) items = [];
        if ($this.ShipmentStatus == null) $this.ShipmentStatus = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ShipmentStatus.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.removeShipmentStatus($this, $this.ShipmentStatus[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.addManyShipmentStatus($this, copyItems);
    }
    static addManyShipmentStatus = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.addShipmentStatus($this, items[i]);
        }
    }
    static addShipmentStatus = ($this, item) => {
        if ($this.ShipmentStatus == null) $this.ShipmentStatus = [];
        if (item == null || $this.ShipmentStatus.indexOf(item) > -1) return;
        $this.ShipmentStatus.push(item);
    }
    static addRangeShipmentStatus = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.addShipmentStatus($this, item));
    }
    static removeShipmentStatus = ($this, item) => {
        if ($this == null || $this.ShipmentStatus == null || $this.ShipmentStatus.indexOf(item) === -1) return;
        var _index = $this.ShipmentStatus.indexOf(item);
        $this.ShipmentStatus.splice(_index, 1);
    }
    static clearShipmentStatus = ($this) => {
        $this.ShipmentStatus = null;
    }
    static setDeparturePoint = ($this, value) => {
        var oldValue = $this.DeparturePoint;
        $this.DeparturePoint = value;
        if (value != null) {
        }
    }
    static setFinalDestination = ($this, value) => {
        var oldValue = $this.FinalDestination;
        $this.FinalDestination = value;
        if (value != null) {
        }
    }
    static setDriver = ($this, value) => {
        var oldValue = $this.Driver;
        $this.Driver = value;
        if (value != null) {
        }
    }
    static setOccupiedVolume = ($this, value) => {
        var oldValue = $this.OccupiedVolume;
        $this.OccupiedVolume = value;
        if (value != null) {
        }
    }
    static setAcceptedConditions = ($this, items) => {
        if (items == null) items = [];
        if ($this.AcceptedConditions == null) $this.AcceptedConditions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.AcceptedConditions.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.removeAcceptedConditions($this, $this.AcceptedConditions[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.addManyAcceptedConditions($this, copyItems);
    }
    static addManyAcceptedConditions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.addAcceptedConditions($this, items[i]);
        }
    }
    static addAcceptedConditions = ($this, item) => {
        if ($this.AcceptedConditions == null) $this.AcceptedConditions = [];
        if (item == null || $this.AcceptedConditions.indexOf(item) > -1) return;
        $this.AcceptedConditions.push(item);
    }
    static addRangeAcceptedConditions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.addAcceptedConditions($this, item));
    }
    static removeAcceptedConditions = ($this, item) => {
        if ($this == null || $this.AcceptedConditions == null || $this.AcceptedConditions.indexOf(item) === -1) return;
        var _index = $this.AcceptedConditions.indexOf(item);
        $this.AcceptedConditions.splice(_index, 1);
    }
    static clearAcceptedConditions = ($this) => {
        $this.AcceptedConditions = null;
    }
    static setVehiculeType = ($this, value) => {
        var oldValue = $this.VehiculeType;
        $this.VehiculeType = value;
        if (value != null) {
        }
    }
    static setPath = ($this, items) => {
        if (items == null) items = [];
        if ($this.Path == null) $this.Path = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Path.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.removePath($this, $this.Path[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.addManyPath($this, copyItems);
    }
    static addManyPath = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.addPath($this, items[i]);
        }
    }
    static addPath = ($this, item) => {
        if ($this.Path == null) $this.Path = [];
        if (item == null || $this.Path.indexOf(item) > -1) return;
        $this.Path.push(item);
    }
    static addRangePath = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.addPath($this, item));
    }
    static removePath = ($this, item) => {
        if ($this == null || $this.Path == null || $this.Path.indexOf(item) === -1) return;
        var _index = $this.Path.indexOf(item);
        $this.Path.splice(_index, 1);
    }
    static clearPath = ($this) => {
        $this.Path = null;
    }
    static Get_AverageVolume($this: any): any{return Joove.Common.safeNumber((Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => $this.Path.linq.sum((a) => Joove.Common.nullSafe<any>(() => a.CurrentLoad, 0)), 0)) / Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => $this.Path.length, 0)))) / Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => $this.TotalVolume, 0));

                                                 }
        static Get_CurrentStatus($this: any): any{if ((Joove.Common.nullSafe<any>(() => $this.ShipmentStatus.linq.orderByDescending((a) => Joove.Common.nullSafe<any>(() => a.TimeReported, new Date('1753-01-01'))).toArray().linq.where().firstOrDefault(null), null) != null && Joove.Common.nullSafe<any>(() => $this.ShipmentStatus.linq.orderByDescending((a) => Joove.Common.nullSafe<any>(() => a.TimeReported, new Date('1753-01-01'))).toArray().linq.where().firstOrDefault(null).Status, null) != null)) {
    return Joove.Common.nullSafe<any>(() => $this.ShipmentStatus.linq.orderByDescending((a) => Joove.Common.nullSafe<any>(() => a.TimeReported, new Date('1753-01-01'))).toArray().linq.where().firstOrDefault(null).Status.Description, "");
    }

    return null;

                                             }
    static GetCostSplit($this: any, WeightVolume: any,WeightPoints: any,WeightPath: any): any{return null;

                                                                                                 }
        static GetVolumeSpread($this: any): any{return Joove.Common.nullSafe<any>(() => $this.Path.linq.select((a) => Joove.Common.nullSafe<any>(() => a.CurrentLoad, 0)).toArray(), null);

                                               }
        static MaxVolume($this: any): any{return Joove.Common.nullSafe<any>(() => $this.Path.linq.select((a) => Joove.Common.nullSafe<any>(() => a.CurrentLoad, 0)).max(), 0);

                                         }
        static OrderFits($this: any, Order: any): any{return CLMS.Framework.Number.LessThanOrEqual(() => Joove.Common.safeNumber(DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment.MaxVolume($this)) + Joove.Common.safeNumber(DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.Get_AggregateVolume(Order)), () => $this.TotalVolume);

                                                     }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ShipmentStatus  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.ShipmentStatus";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TimeReported:
    any;
Description:
    any;
User:
    any;
Status:
    any;
    static setStatus = ($this, value) => {
        var oldValue = $this.Status;
        $this.Status = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Point  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Point";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LocId:
    any;
Time:
    any;
Distance:
    any;
CurrentLoad:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ShippingOrder  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.Shipment = [];
        this.StatusEvolution = [];
        this.PlannedVolume = [];
        this.ActualVolume = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
DepartureDate:
    any;
ArrivalDate:
    any;
Shipper:
    any;
Carrier:
    any;
CurrentStatus:
    any;
ItemDescription:
    any;
Conditions:
    any;
AggregateVolume:
    any;
Priority:
    any;
Shipment:
    any;
DeparturePoint:
    any;
ArrivalPoint:
    any;
StatusEvolution:
    any;
Parent:
    any;
PlannedVolume:
    any;
ActualVolume:
    any;
ItemType:
    any;
    static setShipment = ($this, items) => {
        if (items == null) items = [];
        if ($this.Shipment == null) $this.Shipment = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Shipment.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.removeShipment($this, $this.Shipment[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.addManyShipment($this, copyItems);
    }
    static addManyShipment = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.addShipment($this, items[i]);
        }
    }
    static addShipment = ($this, item) => {
        if ($this.Shipment == null) $this.Shipment = [];
        if (item == null || $this.Shipment.indexOf(item) > -1) return;
        $this.Shipment.push(item);
        Shipment.addShippingOrders(item, $this);
    }
    static addRangeShipment = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.addShipment($this, item));
    }
    static removeShipment = ($this, item) => {
        if ($this == null || $this.Shipment == null || $this.Shipment.indexOf(item) === -1) return;
        var _index = $this.Shipment.indexOf(item);
        $this.Shipment.splice(_index, 1);
        Shipment.removeShippingOrders(item, $this);
    }
    static clearShipment = ($this) => {
        $this.Shipment = null;
    }
    static setDeparturePoint = ($this, value) => {
        var oldValue = $this.DeparturePoint;
        $this.DeparturePoint = value;
        if (value != null) {
        }
    }
    static setArrivalPoint = ($this, value) => {
        var oldValue = $this.ArrivalPoint;
        $this.ArrivalPoint = value;
        if (value != null) {
        }
    }
    static setStatusEvolution = ($this, items) => {
        if (items == null) items = [];
        if ($this.StatusEvolution == null) $this.StatusEvolution = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.StatusEvolution.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.removeStatusEvolution($this, $this.StatusEvolution[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.addManyStatusEvolution($this, copyItems);
    }
    static addManyStatusEvolution = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.addStatusEvolution($this, items[i]);
        }
    }
    static addStatusEvolution = ($this, item) => {
        if ($this.StatusEvolution == null) $this.StatusEvolution = [];
        if (item == null || $this.StatusEvolution.indexOf(item) > -1) return;
        $this.StatusEvolution.push(item);
    }
    static addRangeStatusEvolution = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.addStatusEvolution($this, item));
    }
    static removeStatusEvolution = ($this, item) => {
        if ($this == null || $this.StatusEvolution == null || $this.StatusEvolution.indexOf(item) === -1) return;
        var _index = $this.StatusEvolution.indexOf(item);
        $this.StatusEvolution.splice(_index, 1);
    }
    static clearStatusEvolution = ($this) => {
        $this.StatusEvolution = null;
    }
    static setParent = ($this, value) => {
        var oldValue = $this.Parent;
        $this.Parent = value;
        if (value != null) {
        }
    }
    static setPlannedVolume = ($this, items) => {
        if (items == null) items = [];
        if ($this.PlannedVolume == null) $this.PlannedVolume = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.PlannedVolume.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.removePlannedVolume($this, $this.PlannedVolume[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.addManyPlannedVolume($this, copyItems);
    }
    static addManyPlannedVolume = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.addPlannedVolume($this, items[i]);
        }
    }
    static addPlannedVolume = ($this, item) => {
        if ($this.PlannedVolume == null) $this.PlannedVolume = [];
        if (item == null || $this.PlannedVolume.indexOf(item) > -1) return;
        $this.PlannedVolume.push(item);
    }
    static addRangePlannedVolume = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.addPlannedVolume($this, item));
    }
    static removePlannedVolume = ($this, item) => {
        if ($this == null || $this.PlannedVolume == null || $this.PlannedVolume.indexOf(item) === -1) return;
        var _index = $this.PlannedVolume.indexOf(item);
        $this.PlannedVolume.splice(_index, 1);
    }
    static clearPlannedVolume = ($this) => {
        $this.PlannedVolume = null;
    }
    static setActualVolume = ($this, items) => {
        if (items == null) items = [];
        if ($this.ActualVolume == null) $this.ActualVolume = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ActualVolume.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.removeActualVolume($this, $this.ActualVolume[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.addManyActualVolume($this, copyItems);
    }
    static addManyActualVolume = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.addActualVolume($this, items[i]);
        }
    }
    static addActualVolume = ($this, item) => {
        if ($this.ActualVolume == null) $this.ActualVolume = [];
        if (item == null || $this.ActualVolume.indexOf(item) > -1) return;
        $this.ActualVolume.push(item);
    }
    static addRangeActualVolume = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder.addActualVolume($this, item));
    }
    static removeActualVolume = ($this, item) => {
        if ($this == null || $this.ActualVolume == null || $this.ActualVolume.indexOf(item) === -1) return;
        var _index = $this.ActualVolume.indexOf(item);
        $this.ActualVolume.splice(_index, 1);
    }
    static clearActualVolume = ($this) => {
        $this.ActualVolume = null;
    }
    static setItemType = ($this, value) => {
        var oldValue = $this.ItemType;
        $this.ItemType = value;
        if (value != null) {
        }
    }
    static CalculateOrderCost($this: any): any{return 1.00;

                                                  }
        static Get_AggregateLoad($this: any): any{let TotalMass = null;

                for (let _ii = 0; _ii < (Joove.Common.nullSafe<any>(() => $this.PlannedVolume, null) == null ? 0 : Joove.Common.nullSafe<any>(() => $this.PlannedVolume, null).length); _ii++) {
    var i = Joove.Common.nullSafe<any>(() => $this.PlannedVolume, null)[_ii];
        TotalMass = Joove.Common.safeNumber(TotalMass) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => i.Weight, 0));
    }

    return TotalMass;

                                             }
    static Get_AggregateVolume($this: any): any{let TotalVolume = null;

                for (let _ii = 0; _ii < (Joove.Common.nullSafe<any>(() => $this.PlannedVolume, null) == null ? 0 : Joove.Common.nullSafe<any>(() => $this.PlannedVolume, null).length); _ii++) {
    var i = Joove.Common.nullSafe<any>(() => $this.PlannedVolume, null)[_ii];
        TotalVolume = Joove.Common.safeNumber(TotalVolume) + Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => i.VolumeComposition.linq.where().firstOrDefault(null).VolumeComponent.StandardVolume, 0)) * Joove.Common.safeNumber(Joove.Common.nullSafe<any>(() => i.VolumeComposition.linq.where().firstOrDefault(null).Units, 0));
    }

    Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Error, "Agregate " + Joove.Common.safeNumber(TotalVolume)), null);

    return TotalVolume;

                                               }
    static Get_CurrentStatus($this: any): any{if ((Joove.Common.nullSafe<any>(() => $this.StatusEvolution.linq.orderByDescending((a) => Joove.Common.nullSafe<any>(() => a.TimeChanged, new Date('1753-01-01'))).toArray().linq.where().firstOrDefault(null), null) != null && Joove.Common.nullSafe<any>(() => $this.StatusEvolution.linq.orderByDescending((a) => Joove.Common.nullSafe<any>(() => a.TimeChanged, new Date('1753-01-01'))).toArray().linq.where().firstOrDefault(null).Status, null) != null)) {
    return Joove.Common.nullSafe<any>(() => $this.StatusEvolution.linq.orderByDescending((a) => Joove.Common.nullSafe<any>(() => a.TimeChanged, new Date('1753-01-01'))).toArray().linq.where().firstOrDefault(null).Status.Description, "");
    }

    return null;

                                             }
    static NewOperation($this: any): any{}
        static NewOperation1($this: any): any{}
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class StatusEvolution  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.StatusEvolution";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TimeChanged:
    any;
Description:
    any;
User:
    any;
Status:
    any;
    static setStatus = ($this, value) => {
        var oldValue = $this.Status;
        $this.Status = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Volume  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Volume";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Pallets:
    any;
Items:
    any;
Weight:
    any;
Supplier:
    any;
    static setSupplier = ($this, value) => {
        var oldValue = $this.Supplier;
        $this.Supplier = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ItemType  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.ItemType";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Description:
    any;
Temperature:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Priority  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Priority";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Status  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Status";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Location  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Location";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.Driver = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Street:
    any;
City:
    any;
Country:
    any;
Number:
    any;
PostCode:
    any;
Label:
    any;
Driver:
    any;
Coordinates:
    any;
    static setDriver = ($this, items) => {
        if (items == null) items = [];
        if ($this.Driver == null) $this.Driver = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Driver.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Location.removeDriver($this, $this.Driver[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.Location.addManyDriver($this, copyItems);
    }
    static addManyDriver = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Location.addDriver($this, items[i]);
        }
    }
    static addDriver = ($this, item) => {
        if ($this.Driver == null) $this.Driver = [];
        if (item == null || $this.Driver.indexOf(item) > -1) return;
        $this.Driver.push(item);
        if (item.Employer != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Driver.setEmployer(item, $this);
        }
    }
    static addRangeDriver = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.Location.addDriver($this, item));
    }
    static removeDriver = ($this, item) => {
        if ($this == null || $this.Driver == null || $this.Driver.indexOf(item) === -1) return;
        var _index = $this.Driver.indexOf(item);
        $this.Driver.splice(_index, 1);
        item.Employer = null;
    }
    static clearDriver = ($this) => {
        $this.Driver = null;
    }
    static setCoordinates = ($this, value) => {
        var oldValue = $this.Coordinates;
        $this.Coordinates = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Coordinates  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Coordinates";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CoordinateX:
    any;
CoordinateY:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Supplier  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Supplier";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Reason  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Reason";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Description:
    any;
test:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Condition  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Condition";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class LegVolumeDetails  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.LegVolumeDetails";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
FreeSpace:
    any;
Time:
    any;
Distance:
    any;
CurrentLoad:
    any;
Origin:
    any;
Destination:
    any;
    static setOrigin = ($this, value) => {
        var oldValue = $this.Origin;
        $this.Origin = value;
        if (value != null) {
        }
    }
    static setDestination = ($this, value) => {
        var oldValue = $this.Destination;
        $this.Destination = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class PathVolumeDetail  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.PathVolumeDetail";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.Legs = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalTime:
    any;
Legs:
    any;
Shipment:
    any;
    static setLegs = ($this, items) => {
        if (items == null) items = [];
        if ($this.Legs == null) $this.Legs = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Legs.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.PathVolumeDetail.removeLegs($this, $this.Legs[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.PathVolumeDetail.addManyLegs($this, copyItems);
    }
    static addManyLegs = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.PathVolumeDetail.addLegs($this, items[i]);
        }
    }
    static addLegs = ($this, item) => {
        if ($this.Legs == null) $this.Legs = [];
        if (item == null || $this.Legs.indexOf(item) > -1) return;
        $this.Legs.push(item);
    }
    static addRangeLegs = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.PathVolumeDetail.addLegs($this, item));
    }
    static removeLegs = ($this, item) => {
        if ($this == null || $this.Legs == null || $this.Legs.indexOf(item) === -1) return;
        var _index = $this.Legs.indexOf(item);
        $this.Legs.splice(_index, 1);
    }
    static clearLegs = ($this) => {
        $this.Legs = null;
    }
    static setShipment = ($this, value) => {
        var oldValue = $this.Shipment;
        $this.Shipment = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class CostSplit  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.CostSplit";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.Orders = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Cost:
    any;
Shipper:
    any;
StandAloneCost:
    any;
Orders:
    any;
    static setOrders = ($this, items) => {
        if (items == null) items = [];
        if ($this.Orders == null) $this.Orders = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Orders.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.CostSplit.removeOrders($this, $this.Orders[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.CostSplit.addManyOrders($this, copyItems);
    }
    static addManyOrders = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.CostSplit.addOrders($this, items[i]);
        }
    }
    static addOrders = ($this, item) => {
        if ($this.Orders == null) $this.Orders = [];
        if (item == null || $this.Orders.indexOf(item) > -1) return;
        $this.Orders.push(item);
    }
    static addRangeOrders = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.CostSplit.addOrders($this, item));
    }
    static removeOrders = ($this, item) => {
        if ($this == null || $this.Orders == null || $this.Orders.indexOf(item) === -1) return;
        var _index = $this.Orders.indexOf(item);
        $this.Orders.splice(_index, 1);
    }
    static clearOrders = ($this) => {
        $this.Orders = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class StatusRule  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.StatusRule";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Limit:
    any;
Case:
    any;
Carrier:
    any;
Shipper:
    any;
MailShipper:
    any;
MailCarrier:
    any;
CustomMail:
    any;
Status:
    any;
ForcedStatus:
    any;
    static setStatus = ($this, value) => {
        var oldValue = $this.Status;
        $this.Status = value;
        if (value != null) {
        }
    }
    static setForcedStatus = ($this, value) => {
        var oldValue = $this.ForcedStatus;
        $this.ForcedStatus = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Vehicule  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Vehicule";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OverHeadCost:
    any;
CalculatedTimeCost:
    any;
CalculatedDistanceCost:
    any;
CalculatedOwnershipCost:
    any;
VehiculeType:
    any;
Volume:
    any;
CO2perKm:
    any;
AmortizationType:
    any;
MaximumLoad:
    any;
DistanceCosts:
    any;
TimeCosts:
    any;
OwnershipCost:
    any;
AmortizationType1:
    any;
    static setDistanceCosts = ($this, value) => {
        var oldValue = $this.DistanceCosts;
        $this.DistanceCosts = value;
        if (value != null) {
        }
    }
    static setTimeCosts = ($this, value) => {
        var oldValue = $this.TimeCosts;
        $this.TimeCosts = value;
        if (value != null) {
        }
    }
    static setOwnershipCost = ($this, value) => {
        var oldValue = $this.OwnershipCost;
        $this.OwnershipCost = value;
        if (value != null) {
            if (oldValue != null && oldValue.Vehicule != null) {
                oldValue.Vehicule = null;
            }
            if ($this.OwnershipCost.Vehicule !== $this) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.OwnershipCost.setVehicule(value, $this);
            }
        }
    }
    static setAmortizationType1 = ($this, value) => {
        var oldValue = $this.AmortizationType1;
        $this.AmortizationType1 = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DistanceCosts  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.DistanceCosts";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.PropulsionTypeCost = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalDistanceDriven:
    any;
TotalDistanceService:
    any;
OilCost:
    any;
OilConsumption:
    any;
TireCost:
    any;
YearlyReparationCost:
    any;
Cost:
    any;
TireConsumption:
    any;
PropulsionTypeCost:
    any;
    static setPropulsionTypeCost = ($this, items) => {
        if (items == null) items = [];
        if ($this.PropulsionTypeCost == null) $this.PropulsionTypeCost = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.PropulsionTypeCost.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.DistanceCosts.removePropulsionTypeCost($this, $this.PropulsionTypeCost[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.DistanceCosts.addManyPropulsionTypeCost($this, copyItems);
    }
    static addManyPropulsionTypeCost = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.DistanceCosts.addPropulsionTypeCost($this, items[i]);
        }
    }
    static addPropulsionTypeCost = ($this, item) => {
        if ($this.PropulsionTypeCost == null) $this.PropulsionTypeCost = [];
        if (item == null || $this.PropulsionTypeCost.indexOf(item) > -1) return;
        $this.PropulsionTypeCost.push(item);
    }
    static addRangePropulsionTypeCost = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.DistanceCosts.addPropulsionTypeCost($this, item));
    }
    static removePropulsionTypeCost = ($this, item) => {
        if ($this == null || $this.PropulsionTypeCost == null || $this.PropulsionTypeCost.indexOf(item) === -1) return;
        var _index = $this.PropulsionTypeCost.indexOf(item);
        $this.PropulsionTypeCost.splice(_index, 1);
    }
    static clearPropulsionTypeCost = ($this) => {
        $this.PropulsionTypeCost = null;
    }
    static SetCost($this: any, Cost: any): any{$this.Cost = Cost;

                                                  }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class TimeCosts  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.TimeCosts";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
DriverSalary:
    any;
DriverWorkHours:
    any;
DriverServiceHours:
    any;
VehiculeHoursPerDay:
    any;
VehiculeDaysPerYear:
    any;
RoadTax:
    any;
VehiculeInsurance:
    any;
GoodsInssurance:
    any;
Maintainance:
    any;
DaysOfReplacementVehicules:
    any;
CostOfReplacement:
    any;
Cost:
    any;
    static SetCost($this: any, Cost: any): any{$this.Cost = Cost;

                                                  }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OwnershipCost  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.OwnershipCost";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
VehiculePurchaseCost:
    any;
RefrigerationSystemCost:
    any;
LetteringCost:
    any;
InterestRate:
    any;
PaybackPeriod:
    any;
TotalDistancePerVehicule:
    any;
AmortizationPeriod:
    any;
ResidualValue:
    any;
UtilizationPeriod:
    any;
Cost:
    any;
Vehicule:
    any;
    static setVehicule = ($this, value) => {
        var oldValue = $this.Vehicule;
        $this.Vehicule = value;
        if (value != null) {
            if (oldValue != null && oldValue.OwnershipCost != null) {
                oldValue.OwnershipCost = null;
            }
            if ($this.Vehicule.OwnershipCost !== $this) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.Vehicule.setOwnershipCost(value, $this);
            }
        }
    }
    static SetCost($this: any, Cost: any): any{$this.Cost = Cost;

                                                  }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class PropulsionTypeCost  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.PropulsionTypeCost";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Cost:
    any;
AverageConsumption:
    any;
Percentage:
    any;
OilType:
    any;
    static setOilType = ($this, value) => {
        var oldValue = $this.OilType;
        $this.OilType = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OilType  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.OilType";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Oil:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AmortizationType  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.AmortizationType";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Label:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class VolumePerShipper  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumePerShipper";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Description:
    any;
Volume:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class CO2PerCarrier  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.CO2PerCarrier";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Description:
    any;
KgCO2:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class CustomVolume  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.CustomVolume";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.VolumeComposition = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Weight:
    any;
Label:
    any;
VolumeComposition:
    any;
    static setVolumeComposition = ($this, items) => {
        if (items == null) items = [];
        if ($this.VolumeComposition == null) $this.VolumeComposition = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.VolumeComposition.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.CustomVolume.removeVolumeComposition($this, $this.VolumeComposition[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.CustomVolume.addManyVolumeComposition($this, copyItems);
    }
    static addManyVolumeComposition = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.CustomVolume.addVolumeComposition($this, items[i]);
        }
    }
    static addVolumeComposition = ($this, item) => {
        if ($this.VolumeComposition == null) $this.VolumeComposition = [];
        if (item == null || $this.VolumeComposition.indexOf(item) > -1) return;
        $this.VolumeComposition.push(item);
    }
    static addRangeVolumeComposition = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.CustomVolume.addVolumeComposition($this, item));
    }
    static removeVolumeComposition = ($this, item) => {
        if ($this == null || $this.VolumeComposition == null || $this.VolumeComposition.indexOf(item) === -1) return;
        var _index = $this.VolumeComposition.indexOf(item);
        $this.VolumeComposition.splice(_index, 1);
    }
    static clearVolumeComposition = ($this) => {
        $this.VolumeComposition = null;
    }
    static Compare($this: any, Volume: any): any{let compare = 0;

                for (var i = 0; CLMS.Framework.Number.LessThan(() => i, () => $this.VolumeComposition.length); i = Joove.Common.safeNumber(i) + Joove.Common.safeNumber(1)) {
    if ((CLMS.Framework.Number.NotEqual(() => $this.VolumeComposition[i].Units, () => Volume.VolumeComposition[i].Units))) {
            compare = Joove.Common.safeNumber(compare) + Joove.Common.safeNumber(1);
        }
    }


    return compare;

                                                }
    static CustomCopy($this: any): any{let returnVolume = Joove.Common.nullSafe<any>(() => new DSS3_LogisticsPoolingForUrbanDistribution.BO.CustomVolume(), null);

                                           returnVolume.Label = Joove.Common.nullSafe<any>(() => $this.Label, "");

                                           returnVolume.Weight = Joove.Common.nullSafe<any>(() => $this.Weight, 0);

                                           for (let _ij = 0; _ij < (Joove.Common.nullSafe<any>(() => $this.VolumeComposition, null) == null ? 0 : Joove.Common.nullSafe<any>(() => $this.VolumeComposition, null).length); _ij++) {
    var j = Joove.Common.nullSafe<any>(() => $this.VolumeComposition, null)[_ij];
        let currentVolume = Joove.Common.nullSafe<any>(() => new DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumeComposition(), null);
        currentVolume.Units = Joove.Common.nullSafe<any>(() => j.Units, 0);
        DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumeComposition.setVolumeComponent(currentVolume, Joove.Common.nullSafe<any>(() => j.VolumeComponent, null));
        Joove.Common.nullSafe<any>(() => returnVolume.VolumeComposition.add(currentVolume), null);
    }

    return returnVolume;

                                      }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class VolumeComponent  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumeComponent";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
StandardVolume:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class VolumeComposition  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumeComposition";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Units:
    any;
VolumeComponent:
    any;
    static setVolumeComponent = ($this, value) => {
        var oldValue = $this.VolumeComponent;
        $this.VolumeComponent = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Solution  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Solution";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.Routes = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalTime:
    any;
TotalDistance:
    any;
Routes:
    any;
    static setRoutes = ($this, items) => {
        if (items == null) items = [];
        if ($this.Routes == null) $this.Routes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Routes.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Solution.removeRoutes($this, $this.Routes[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.Solution.addManyRoutes($this, copyItems);
    }
    static addManyRoutes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Solution.addRoutes($this, items[i]);
        }
    }
    static addRoutes = ($this, item) => {
        if ($this.Routes == null) $this.Routes = [];
        if (item == null || $this.Routes.indexOf(item) > -1) return;
        $this.Routes.push(item);
    }
    static addRangeRoutes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.Solution.addRoutes($this, item));
    }
    static removeRoutes = ($this, item) => {
        if ($this == null || $this.Routes == null || $this.Routes.indexOf(item) === -1) return;
        var _index = $this.Routes.indexOf(item);
        $this.Routes.splice(_index, 1);
    }
    static clearRoutes = ($this) => {
        $this.Routes = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Route  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Route";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.Activities = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalTime:
    any;
TotalDistance:
    any;
Vehicule:
    any;
Activities:
    any;
    static setVehicule = ($this, value) => {
        var oldValue = $this.Vehicule;
        $this.Vehicule = value;
        if (value != null) {
        }
    }
    static setActivities = ($this, items) => {
        if (items == null) items = [];
        if ($this.Activities == null) $this.Activities = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Activities.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Route.removeActivities($this, $this.Activities[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.Route.addManyActivities($this, copyItems);
    }
    static addManyActivities = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Route.addActivities($this, items[i]);
        }
    }
    static addActivities = ($this, item) => {
        if ($this.Activities == null) $this.Activities = [];
        if (item == null || $this.Activities.indexOf(item) > -1) return;
        $this.Activities.push(item);
    }
    static addRangeActivities = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.Route.addActivities($this, item));
    }
    static removeActivities = ($this, item) => {
        if ($this == null || $this.Activities == null || $this.Activities.indexOf(item) === -1) return;
        var _index = $this.Activities.indexOf(item);
        $this.Activities.splice(_index, 1);
    }
    static clearActivities = ($this) => {
        $this.Activities = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Activity  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Activity";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TravelDistance:
    any;
TravelDuration:
    any;
Order:
    any;
Point:
    any;
    static setOrder = ($this, value) => {
        var oldValue = $this.Order;
        $this.Order = value;
        if (value != null) {
        }
    }
    static setPoint = ($this, value) => {
        var oldValue = $this.Point;
        $this.Point = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class TblZslNormalisationSuggestion  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.TblZslNormalisationSuggestion";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.SuggestionsId = 0;
    }
SuggestionsId:
    any;
Customer_Name:
    any;
Sender_Name:
    any;
Sender_Address:
    any;
Existing_Sender_City:
    any;
Normalised_Sender_City:
    any;
Sender_Country:
    any;
Sender_Zipcode:
    any;
Receiver_Name:
    any;
Receiver_Address:
    any;
Existing_Receiver_City:
    any;
Normalised_Receiver_City:
    any;
Existing_Pallet_Name:
    any;
Normalised_Pallet_Name:
    any;
Receiver_Zipcode:
    any;
Receiver_Country:
    any;
Carrier:
    any;
Order_Number:
    any;
Shipment_Date:
    any;
Weight:
    any;
Volume:
    any;
Cost:
    any;
Currency:
    any;
Number_Of_Pallets:
    any;
Suggestion_Date:
    any;
Approved:
    any;
ApprovedBy:
    any;
ApprovedDate:
    any;
Owner:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.SuggestionsId == null || $this.SuggestionsId == 0;
    }
}

export class tblZslBookingType  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslBookingType";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
BookingTypeName:
    any;
BookingType:
    any;
    static setBookingType = ($this, value) => {
        var oldValue = $this.BookingType;
        $this.BookingType = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslCarrier  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslCarrier";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CarrierName:
    any;
Carrier:
    any;
    static setCarrier = ($this, value) => {
        var oldValue = $this.Carrier;
        $this.Carrier = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslCustomer  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslCustomer";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CustomerFullName:
    any;
Customer:
    any;
    static setCustomer = ($this, value) => {
        var oldValue = $this.Customer;
        $this.Customer = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslDeliveryStatus  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslDeliveryStatus";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
DeliveryStatusName:
    any;
DeliveryStatus:
    any;
    static setDeliveryStatus = ($this, value) => {
        var oldValue = $this.DeliveryStatus;
        $this.DeliveryStatus = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslPlatformBookingOrder  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslPlatformBookingOrder";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
BookingDate:
    any;
OrderNo:
    any;
NoIdentity:
    any;
FromExtTime:
    any;
ToExtTime:
    any;
BookStatus:
    any;
NoPlatform:
    any;
NoCourier:
    any;
Warehouse:
    any;
Driver:
    any;
DriverTelephone:
    any;
Plate:
    any;
Trailerplate:
    any;
PalletIN:
    any;
TotalPallet:
    any;
DateArrived:
    any;
TimeArrived:
    any;
DateExit:
    any;
TImeExit:
    any;
RouteTracking_ID:
    any;
PlatformBookingOrder:
    any;
tblZslCustomer:
    any;
tblZslBookingType:
    any;
tblZslTransportOrder:
    any;
    static setPlatformBookingOrder = ($this, value) => {
        var oldValue = $this.PlatformBookingOrder;
        $this.PlatformBookingOrder = value;
        if (value != null) {
        }
    }
    static settblZslCustomer = ($this, value) => {
        var oldValue = $this.tblZslCustomer;
        $this.tblZslCustomer = value;
        if (value != null) {
        }
    }
    static settblZslBookingType = ($this, value) => {
        var oldValue = $this.tblZslBookingType;
        $this.tblZslBookingType = value;
        if (value != null) {
        }
    }
    static settblZslTransportOrder = ($this, value) => {
        var oldValue = $this.tblZslTransportOrder;
        $this.tblZslTransportOrder = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslRoute  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslRoute";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
EntryDate:
    any;
RouteNumber:
    any;
LastUpdated:
    any;
Route:
    any;
    static setRoute = ($this, value) => {
        var oldValue = $this.Route;
        $this.Route = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslTransportDetail  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportDetail";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.TransportDetailsID = 0;
    }
TransportDetailsID:
    any;
EventID:
    any;
Qty:
    any;
ExtDateStart:
    any;
ExtTimeStart:
    any;
ExtTimeAction:
    any;
RealDateStart:
    any;
RealTimeStart:
    any;
RealTimeAction:
    any;
tblZslPlatformBookingOrder:
    any;
tblZslCustomer:
    any;
tblZslWorker:
    any;
    static settblZslPlatformBookingOrder = ($this, value) => {
        var oldValue = $this.tblZslPlatformBookingOrder;
        $this.tblZslPlatformBookingOrder = value;
        if (value != null) {
        }
    }
    static settblZslCustomer = ($this, value) => {
        var oldValue = $this.tblZslCustomer;
        $this.tblZslCustomer = value;
        if (value != null) {
        }
    }
    static settblZslWorker = ($this, value) => {
        var oldValue = $this.tblZslWorker;
        $this.tblZslWorker = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.TransportDetailsID == null || $this.TransportDetailsID == 0;
    }
}

export class tblZslTransportEvent  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportEvent";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.EventID = 0;
    }
EventID:
    any;
EventDesc:
    any;
EventTime:
    any;
tblZslCustomer:
    any;
tblZslWorker:
    any;
    static settblZslCustomer = ($this, value) => {
        var oldValue = $this.tblZslCustomer;
        $this.tblZslCustomer = value;
        if (value != null) {
        }
    }
    static settblZslWorker = ($this, value) => {
        var oldValue = $this.tblZslWorker;
        $this.tblZslWorker = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.EventID == null || $this.EventID == 0;
    }
}

export class tblZslTransportExecutionPlan  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportExecutionPlan";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.ExecutionPlanID = 0;
    }
ExecutionPlanID:
    any;
Notes:
    any;
ETA:
    any;
ActualArrivalTime:
    any;
tblZslCarrier:
    any;
tblZslPlatformBookingOrder:
    any;
tblZslDeliveryStatus:
    any;
    static settblZslCarrier = ($this, value) => {
        var oldValue = $this.tblZslCarrier;
        $this.tblZslCarrier = value;
        if (value != null) {
        }
    }
    static settblZslPlatformBookingOrder = ($this, value) => {
        var oldValue = $this.tblZslPlatformBookingOrder;
        $this.tblZslPlatformBookingOrder = value;
        if (value != null) {
        }
    }
    static settblZslDeliveryStatus = ($this, value) => {
        var oldValue = $this.tblZslDeliveryStatus;
        $this.tblZslDeliveryStatus = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.ExecutionPlanID == null || $this.ExecutionPlanID == 0;
    }
}

export class tblZslTransportOrder  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportOrder";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TransportOrderNo:
    any;
OrderYear:
    any;
DocumentTransportNo:
    any;
OrderDate:
    any;
DepartureCustomerName:
    any;
DepartureAddress:
    any;
DepartureCity:
    any;
DepartureState:
    any;
DestinationName:
    any;
DestinationAddress:
    any;
DestinationCity:
    any;
DestinationState:
    any;
Qty:
    any;
OrderWeight:
    any;
Volume:
    any;
Pallet:
    any;
RetiredDate:
    any;
DeliveryDate:
    any;
Note:
    any;
CallCustomerBefore:
    any;
Telephone:
    any;
DayClosed:
    any;
Urgent:
    any;
TransportOrder:
    any;
tblZslCustomer:
    any;
    static setTransportOrder = ($this, value) => {
        var oldValue = $this.TransportOrder;
        $this.TransportOrder = value;
        if (value != null) {
        }
    }
    static settblZslCustomer = ($this, value) => {
        var oldValue = $this.tblZslCustomer;
        $this.tblZslCustomer = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class tblZslWorker  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslWorker";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
WorkerFullName:
    any;
Worker:
    any;
    static setWorker = ($this, value) => {
        var oldValue = $this.Worker;
        $this.Worker = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Comment  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Comment";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Message:
    any;
IssueDate:
    any;
RefRevision:
    any;
RefGUID:
    any;
Issuer:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderDTO  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderDTO";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.OrderDTOKey = 0;
    }
OrdID:
    any;
OrdOrderID_Remote:
    any;
OrdOrderExternalCode:
    any;
OrdOrderDescr:
    any;
OrdRegDateTime:
    any;
OrdDateTime:
    any;
OrdDeliveryDateTime:
    any;
OrdDepositorCode:
    any;
OrdDepositorFullName:
    any;
OrdCustomerCode:
    any;
OrdCustomerFullName:
    any;
OrdStatus:
    any;
OrdMemo:
    any;
OrdPurpose:
    any;
OrdDeliveryValue:
    any;
OrdDeliveryNotes:
    any;
OrdIsReturn:
    any;
OrdPrdTypeDescr:
    any;
OrdWrhRoutingCode:
    any;
OrdDlsId:
    any;
OrdDlsDescr:
    any;
OrdDlsAddress:
    any;
OrdDlsZipCode:
    any;
OrdDlsCity:
    any;
OrdDlsArea:
    any;
OrdRoutingStatus:
    any;
OrdLfdWeight:
    any;
OrdLfdVol:
    any;
OrdLfdCtn:
    any;
OrdLfdBar:
    any;
OrdLfdPalEuro:
    any;
OrdLfdPalInd:
    any;
OrdLfdPalElsa:
    any;
OrdLfdParOU:
    any;
OrdLfdVar:
    any;
OrdVoucherDateTime:
    any;
OrdVoucherNumber:
    any;
OrdVoucherSeries:
    any;
OrdVoucherId:
    any;
OrdAgencyCode:
    any;
OrdAgencyDescr:
    any;
OrdAgencyAddress:
    any;
OrdTelRouteId:
    any;
OrdVchPlateNr:
    any;
OrdVchRouteNr:
    any;
OrdVhrDate:
    any;
OrdVhrID:
    any;
OrdLastUpdateDateTime:
    any;
OrdReadyForLoading:
    any;
Warehouse:
    any;
WarehouseAddress:
    any;
Polyline:
    any;
OrderDTOKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.OrderDTOKey == null || $this.OrderDTOKey == 0;
    }
}

export class OrderStatistics  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderStatistics";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
TotalDeliveries:
    any;
TotalOnTime:
    any;
TotalInFull:
    any;
TotalAsOrdered:
    any;
TotalImpeachments:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class LSP  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.LSPUsers = [];
        this.PrivateTemplates = [];
        this.WorkContracts = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LSPName:
    any;
LSPDescription:
    any;
LSPUsers:
    any;
PrivateTemplates:
    any;
WorkContracts:
    any;
    static setLSPUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.LSPUsers == null) $this.LSPUsers = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.LSPUsers.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.removeLSPUsers($this, $this.LSPUsers[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.addManyLSPUsers($this, copyItems);
    }
    static addManyLSPUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.addLSPUsers($this, items[i]);
        }
    }
    static addLSPUsers = ($this, item) => {
        if ($this.LSPUsers == null) $this.LSPUsers = [];
        if (item == null || $this.LSPUsers.indexOf(item) > -1) return;
        $this.LSPUsers.push(item);
        if (item.LSP != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.LSPUser.setLSP(item, $this);
        }
    }
    static addRangeLSPUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.addLSPUsers($this, item));
    }
    static removeLSPUsers = ($this, item) => {
        if ($this == null || $this.LSPUsers == null || $this.LSPUsers.indexOf(item) === -1) return;
        var _index = $this.LSPUsers.indexOf(item);
        $this.LSPUsers.splice(_index, 1);
        item.LSP = null;
    }
    static clearLSPUsers = ($this) => {
        $this.LSPUsers = null;
    }
    static setPrivateTemplates = ($this, items) => {
        if (items == null) items = [];
        if ($this.PrivateTemplates == null) $this.PrivateTemplates = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.PrivateTemplates.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.removePrivateTemplates($this, $this.PrivateTemplates[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.addManyPrivateTemplates($this, copyItems);
    }
    static addManyPrivateTemplates = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.addPrivateTemplates($this, items[i]);
        }
    }
    static addPrivateTemplates = ($this, item) => {
        if ($this.PrivateTemplates == null) $this.PrivateTemplates = [];
        if (item == null || $this.PrivateTemplates.indexOf(item) > -1) return;
        $this.PrivateTemplates.push(item);
        ScheduledRouteTemplate.addVisibleTo(item, $this);
    }
    static addRangePrivateTemplates = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.addPrivateTemplates($this, item));
    }
    static removePrivateTemplates = ($this, item) => {
        if ($this == null || $this.PrivateTemplates == null || $this.PrivateTemplates.indexOf(item) === -1) return;
        var _index = $this.PrivateTemplates.indexOf(item);
        $this.PrivateTemplates.splice(_index, 1);
        ScheduledRouteTemplate.removeVisibleTo(item, $this);
    }
    static clearPrivateTemplates = ($this) => {
        $this.PrivateTemplates = null;
    }
    static setWorkContracts = ($this, items) => {
        if (items == null) items = [];
        if ($this.WorkContracts == null) $this.WorkContracts = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.WorkContracts.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.removeWorkContracts($this, $this.WorkContracts[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.addManyWorkContracts($this, copyItems);
    }
    static addManyWorkContracts = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.addWorkContracts($this, items[i]);
        }
    }
    static addWorkContracts = ($this, item) => {
        if ($this.WorkContracts == null) $this.WorkContracts = [];
        if (item == null || $this.WorkContracts.indexOf(item) > -1) return;
        $this.WorkContracts.push(item);
        if (item.LSP != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract.setLSP(item, $this);
        }
    }
    static addRangeWorkContracts = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.addWorkContracts($this, item));
    }
    static removeWorkContracts = ($this, item) => {
        if ($this == null || $this.WorkContracts == null || $this.WorkContracts.indexOf(item) === -1) return;
        var _index = $this.WorkContracts.indexOf(item);
        $this.WorkContracts.splice(_index, 1);
        item.LSP = null;
    }
    static clearWorkContracts = ($this) => {
        $this.WorkContracts = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderWMS  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderWMS";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OrdID:
    any;
OrdOrderID_Remote:
    any;
OrdOrderExternalCode:
    any;
OrdOrderDescr:
    any;
OrdRegDateTime:
    any;
OrdDateTime:
    any;
OrdDeliveryDateTime:
    any;
OrdDepositorCode:
    any;
OrdDepositorFullName:
    any;
OrdCustomerCode:
    any;
OrdCustomerFullName:
    any;
OrdStatus:
    any;
OrdMemo:
    any;
OrdPurpose:
    any;
OrdDeliveryValue:
    any;
OrdDeliveryNotes:
    any;
OrdIsReturn:
    any;
OrdPrdTypeDescr:
    any;
OrdWrhRoutingCode:
    any;
OrdDlsId:
    any;
OrdDlsDescr:
    any;
OrdDlsAddress:
    any;
OrdDlsZipCode:
    any;
OrdDlsCity:
    any;
OrdDlsArea:
    any;
OrdRoutingStatus:
    any;
OrdLfdWeight:
    any;
OrdLfdVol:
    any;
OrdLfdCtn:
    any;
OrdLfdBar:
    any;
OrdLfdPalEuro:
    any;
OrdLfdPalInd:
    any;
OrdLfdPalElsa:
    any;
OrdLfdParOU:
    any;
OrdLfdVar:
    any;
OrdVoucherDateTime:
    any;
OrdVoucherNumber:
    any;
OrdVoucherSeries:
    any;
OrdVoucherId:
    any;
OrdAgencyCode:
    any;
OrdAgencyDescr:
    any;
OrdAgencyAddress:
    any;
OrdTelRouteId:
    any;
OrdVchPlateNr:
    any;
OrdVchRouteNr:
    any;
OrdVhrDate:
    any;
OrdVhrID:
    any;
OrdLastUpdateDateTime:
    any;
OrdReadyForLoading:
    any;
OrdStatusString:
    any;
Polyline:
    any;
Warehouse:
    any;
Truck:
    any;
WarehouseAddress:
    any;
ETA:
    any;
ATA:
    any;
DestLat:
    any;
DestLong:
    any;
COE:
    any;
ProofOfDelivery:
    any;
    static setProofOfDelivery = ($this, value) => {
        var oldValue = $this.ProofOfDelivery;
        $this.ProofOfDelivery = value;
        if (value != null) {
            if (oldValue != null && oldValue.OrderWMS != null) {
                oldValue.OrderWMS = null;
            }
            if ($this.ProofOfDelivery.OrderWMS !== $this) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.ProofOfDelivery.setOrderWMS(value, $this);
            }
        }
    }
    static AssignOrdersTrucks(): any{}
        static CopyFields($this: any, order: any): any{$this.OrdID = Joove.Common.nullSafe<any>(() => order.OrdID, 0);

                $this.OrdOrderID_Remote = Joove.Common.nullSafe<any>(() => order.OrdOrderID_Remote, 0);

                $this.OrdOrderExternalCode = Joove.Common.nullSafe<any>(() => order.OrdOrderExternalCode, "");

                $this.OrdOrderDescr = Joove.Common.nullSafe<any>(() => order.OrdOrderDescr, "");

                $this.OrdRegDateTime = Joove.Common.nullSafe<any>(() => order.OrdRegDateTime, new Date('1753-01-01'));

                $this.OrdDateTime = Joove.Common.nullSafe<any>(() => order.OrdDateTime, new Date('1753-01-01'));

                $this.OrdDeliveryDateTime = Joove.Common.nullSafe<any>(() => order.OrdDeliveryDateTime, new Date('1753-01-01'));

                $this.OrdDepositorCode = Joove.Common.nullSafe<any>(() => order.OrdDepositorCode, "");

                $this.OrdDepositorFullName = Joove.Common.nullSafe<any>(() => order.OrdDepositorFullName, "");

                $this.OrdCustomerCode = Joove.Common.nullSafe<any>(() => order.OrdCustomerCode, "");

                $this.OrdCustomerFullName = Joove.Common.nullSafe<any>(() => order.OrdCustomerFullName, "");

                $this.OrdStatus = Joove.Common.nullSafe<any>(() => order.OrdStatus, 0);

                $this.OrdMemo = Joove.Common.nullSafe<any>(() => order.OrdMemo, "");

                $this.OrdPurpose = Joove.Common.nullSafe<any>(() => order.OrdPurpose, "");

                $this.OrdDeliveryValue = Joove.Common.nullSafe<any>(() => order.OrdDeliveryValue, 0);

                $this.OrdDeliveryNotes = Joove.Common.nullSafe<any>(() => order.OrdDeliveryNotes, "");

                $this.OrdIsReturn = Joove.Common.nullSafe<any>(() => order.OrdIsReturn, 0);

                $this.OrdPrdTypeDescr = Joove.Common.nullSafe<any>(() => order.OrdPrdTypeDescr, "");

                $this.OrdWrhRoutingCode = Joove.Common.nullSafe<any>(() => order.OrdWrhRoutingCode, "");

                $this.OrdDlsId = Joove.Common.nullSafe<any>(() => order.OrdDlsId, 0);

                $this.OrdDlsDescr = Joove.Common.nullSafe<any>(() => order.OrdDlsDescr, "");

                $this.OrdDlsAddress = Joove.Common.nullSafe<any>(() => order.OrdDlsAddress, "");

                $this.OrdDlsCity = Joove.Common.nullSafe<any>(() => order.OrdDlsCity, "");

                $this.OrdDlsArea = Joove.Common.nullSafe<any>(() => order.OrdDlsArea, "");

                $this.OrdRoutingStatus = Joove.Common.nullSafe<any>(() => order.OrdRoutingStatus, 0);

                $this.OrdLfdWeight = Joove.Common.nullSafe<any>(() => order.OrdLfdWeight, 0);

                $this.OrdLfdVol = Joove.Common.nullSafe<any>(() => order.OrdLfdVol, 0);

                $this.OrdLfdCtn = Joove.Common.nullSafe<any>(() => order.OrdLfdCtn, 0);

                $this.OrdLfdCtn = Joove.Common.nullSafe<any>(() => order.OrdLfdCtn, 0);

                $this.OrdLfdBar = Joove.Common.nullSafe<any>(() => order.OrdLfdBar, 0);

                $this.OrdLfdPalEuro = Joove.Common.nullSafe<any>(() => order.OrdLfdPalEuro, 0);

                $this.OrdLfdPalInd = Joove.Common.nullSafe<any>(() => order.OrdLfdPalInd, 0);

                $this.OrdLfdPalElsa = Joove.Common.nullSafe<any>(() => order.OrdLfdPalElsa, 0);

                $this.OrdLfdParOU = Joove.Common.nullSafe<any>(() => order.OrdLfdParOU, 0);

                $this.OrdLfdVar = Joove.Common.nullSafe<any>(() => order.OrdLfdVar, 0);

                $this.OrdVoucherDateTime = Joove.Common.nullSafe<any>(() => order.OrdVoucherDateTime, new Date('1753-01-01'));

                $this.OrdVoucherNumber = Joove.Common.nullSafe<any>(() => order.OrdVoucherNumber, "");

                $this.OrdVoucherSeries = Joove.Common.nullSafe<any>(() => order.OrdVoucherSeries, "");

                $this.OrdVoucherId = Joove.Common.nullSafe<any>(() => order.OrdVoucherId, 0);

                $this.OrdAgencyCode = Joove.Common.nullSafe<any>(() => order.OrdAgencyCode, "");

                $this.OrdAgencyAddress = Joove.Common.nullSafe<any>(() => order.OrdAgencyAddress, "");

                $this.OrdAgencyDescr = Joove.Common.nullSafe<any>(() => order.OrdAgencyDescr, "");

                $this.OrdTelRouteId = Joove.Common.nullSafe<any>(() => order.OrdTelRouteId, 0);

                $this.OrdVchPlateNr = Joove.Common.nullSafe<any>(() => order.OrdVchPlateNr, "");

                $this.OrdVchRouteNr = Joove.Common.nullSafe<any>(() => order.OrdVchRouteNr, 0);

                $this.OrdVhrDate = Joove.Common.nullSafe<any>(() => order.OrdVhrDate, new Date('1753-01-01'));

                $this.OrdVhrID = Joove.Common.nullSafe<any>(() => order.OrdVhrID, 0);

                $this.OrdLastUpdateDateTime = Joove.Common.nullSafe<any>(() => order.OrdLastUpdateDateTime, new Date('1753-01-01'));

                $this.OrdReadyForLoading = Joove.Common.nullSafe<any>(() => order.OrdReadyForLoading, 0);

                $this.Polyline = Joove.Common.nullSafe<any>(() => order.Polyline, "");

                $this.Warehouse = Joove.Common.nullSafe<any>(() => order.Warehouse, "");

                $this.Truck = Joove.Common.nullSafe<any>(() => order.Truck, "");

                                                      }
        static NewOperation($this: any): any{}
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Warehouse  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Warehouse";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.RegionalAgentsService = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Description:
    any;
Title:
    any;
Address:
    any;
Telephone:
    any;
GeoCoordinates:
    any;
RegionalAgentsService:
    any;
    static setGeoCoordinates = ($this, value) => {
        var oldValue = $this.GeoCoordinates;
        $this.GeoCoordinates = value;
        if (value != null) {
        }
    }
    static setRegionalAgentsService = ($this, items) => {
        if (items == null) items = [];
        if ($this.RegionalAgentsService == null) $this.RegionalAgentsService = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.RegionalAgentsService.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Warehouse.removeRegionalAgentsService($this, $this.RegionalAgentsService[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.Warehouse.addManyRegionalAgentsService($this, copyItems);
    }
    static addManyRegionalAgentsService = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Warehouse.addRegionalAgentsService($this, items[i]);
        }
    }
    static addRegionalAgentsService = ($this, item) => {
        if ($this.RegionalAgentsService == null) $this.RegionalAgentsService = [];
        if (item == null || $this.RegionalAgentsService.indexOf(item) > -1) return;
        $this.RegionalAgentsService.push(item);
        RegionalAgent.addWarehousesSupport(item, $this);
    }
    static addRangeRegionalAgentsService = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.Warehouse.addRegionalAgentsService($this, item));
    }
    static removeRegionalAgentsService = ($this, item) => {
        if ($this == null || $this.RegionalAgentsService == null || $this.RegionalAgentsService.indexOf(item) === -1) return;
        var _index = $this.RegionalAgentsService.indexOf(item);
        $this.RegionalAgentsService.splice(_index, 1);
        RegionalAgent.removeWarehousesSupport(item, $this);
    }
    static clearRegionalAgentsService = ($this) => {
        $this.RegionalAgentsService = null;
    }
    static InitWarehouse(): any{}
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ProofOfDelivery  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.ProofOfDelivery";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
DateIssued:
    any;
PODNumber:
    any;
QualityStatus:
    any;
QuantityStatus:
    any;
DeliveryStatus:
    any;
PODAttachment:
    any;
Comments:
    any;
DamagedPackaging:
    any;
DamagedProducts:
    any;
CloseToExpiry:
    any;
TruckDriver:
    any;
OrderWMS:
    any;
    static setTruckDriver = ($this, value) => {
        var oldValue = $this.TruckDriver;
        $this.TruckDriver = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckDriver.removeProofOfDelivery(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckDriver.addProofOfDelivery(value, $this);
        }
    }
    static setOrderWMS = ($this, value) => {
        var oldValue = $this.OrderWMS;
        $this.OrderWMS = value;
        if (value != null) {
            if (oldValue != null && oldValue.ProofOfDelivery != null) {
                oldValue.ProofOfDelivery = null;
            }
            if ($this.OrderWMS.ProofOfDelivery !== $this) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderWMS.setProofOfDelivery(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class RegionalAgent  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.WarehousesSupport = [];
        this.RAUsers = [];
        this.AreaSupport = [];
        this.Trucks = [];
        this.ScheduledRouteTemplates = [];
        this.WorkContract = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
AgencyCode:
    any;
AgencyDescription:
    any;
AgencyAddress:
    any;
IsSelected:
    any;
Rating:
    any;
WarehousesSupport:
    any;
RAUsers:
    any;
AddressCoordinates:
    any;
AreaSupport:
    any;
Trucks:
    any;
ScheduledRouteTemplates:
    any;
WorkContract:
    any;
    static setWarehousesSupport = ($this, items) => {
        if (items == null) items = [];
        if ($this.WarehousesSupport == null) $this.WarehousesSupport = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.WarehousesSupport.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.removeWarehousesSupport($this, $this.WarehousesSupport[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addManyWarehousesSupport($this, copyItems);
    }
    static addManyWarehousesSupport = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addWarehousesSupport($this, items[i]);
        }
    }
    static addWarehousesSupport = ($this, item) => {
        if ($this.WarehousesSupport == null) $this.WarehousesSupport = [];
        if (item == null || $this.WarehousesSupport.indexOf(item) > -1) return;
        $this.WarehousesSupport.push(item);
        Warehouse.addRegionalAgentsService(item, $this);
    }
    static addRangeWarehousesSupport = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addWarehousesSupport($this, item));
    }
    static removeWarehousesSupport = ($this, item) => {
        if ($this == null || $this.WarehousesSupport == null || $this.WarehousesSupport.indexOf(item) === -1) return;
        var _index = $this.WarehousesSupport.indexOf(item);
        $this.WarehousesSupport.splice(_index, 1);
        Warehouse.removeRegionalAgentsService(item, $this);
    }
    static clearWarehousesSupport = ($this) => {
        $this.WarehousesSupport = null;
    }
    static setRAUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.RAUsers == null) $this.RAUsers = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.RAUsers.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.removeRAUsers($this, $this.RAUsers[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addManyRAUsers($this, copyItems);
    }
    static addManyRAUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addRAUsers($this, items[i]);
        }
    }
    static addRAUsers = ($this, item) => {
        if ($this.RAUsers == null) $this.RAUsers = [];
        if (item == null || $this.RAUsers.indexOf(item) > -1) return;
        $this.RAUsers.push(item);
        if (item.RegionalAgent != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgentUser.setRegionalAgent(item, $this);
        }
    }
    static addRangeRAUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addRAUsers($this, item));
    }
    static removeRAUsers = ($this, item) => {
        if ($this == null || $this.RAUsers == null || $this.RAUsers.indexOf(item) === -1) return;
        var _index = $this.RAUsers.indexOf(item);
        $this.RAUsers.splice(_index, 1);
        item.RegionalAgent = null;
    }
    static clearRAUsers = ($this) => {
        $this.RAUsers = null;
    }
    static setAddressCoordinates = ($this, value) => {
        var oldValue = $this.AddressCoordinates;
        $this.AddressCoordinates = value;
        if (value != null) {
        }
    }
    static setAreaSupport = ($this, items) => {
        if (items == null) items = [];
        if ($this.AreaSupport == null) $this.AreaSupport = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.AreaSupport.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.removeAreaSupport($this, $this.AreaSupport[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addManyAreaSupport($this, copyItems);
    }
    static addManyAreaSupport = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addAreaSupport($this, items[i]);
        }
    }
    static addAreaSupport = ($this, item) => {
        if ($this.AreaSupport == null) $this.AreaSupport = [];
        if (item == null || $this.AreaSupport.indexOf(item) > -1) return;
        $this.AreaSupport.push(item);
    }
    static addRangeAreaSupport = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addAreaSupport($this, item));
    }
    static removeAreaSupport = ($this, item) => {
        if ($this == null || $this.AreaSupport == null || $this.AreaSupport.indexOf(item) === -1) return;
        var _index = $this.AreaSupport.indexOf(item);
        $this.AreaSupport.splice(_index, 1);
    }
    static clearAreaSupport = ($this) => {
        $this.AreaSupport = null;
    }
    static setTrucks = ($this, items) => {
        if (items == null) items = [];
        if ($this.Trucks == null) $this.Trucks = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Trucks.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.removeTrucks($this, $this.Trucks[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addManyTrucks($this, copyItems);
    }
    static addManyTrucks = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addTrucks($this, items[i]);
        }
    }
    static addTrucks = ($this, item) => {
        if ($this.Trucks == null) $this.Trucks = [];
        if (item == null || $this.Trucks.indexOf(item) > -1) return;
        $this.Trucks.push(item);
        if (item.RegionalAgent != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Truck.setRegionalAgent(item, $this);
        }
    }
    static addRangeTrucks = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addTrucks($this, item));
    }
    static removeTrucks = ($this, item) => {
        if ($this == null || $this.Trucks == null || $this.Trucks.indexOf(item) === -1) return;
        var _index = $this.Trucks.indexOf(item);
        $this.Trucks.splice(_index, 1);
        item.RegionalAgent = null;
    }
    static clearTrucks = ($this) => {
        $this.Trucks = null;
    }
    static setScheduledRouteTemplates = ($this, items) => {
        if (items == null) items = [];
        if ($this.ScheduledRouteTemplates == null) $this.ScheduledRouteTemplates = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ScheduledRouteTemplates.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.removeScheduledRouteTemplates($this, $this.ScheduledRouteTemplates[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addManyScheduledRouteTemplates($this, copyItems);
    }
    static addManyScheduledRouteTemplates = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addScheduledRouteTemplates($this, items[i]);
        }
    }
    static addScheduledRouteTemplates = ($this, item) => {
        if ($this.ScheduledRouteTemplates == null) $this.ScheduledRouteTemplates = [];
        if (item == null || $this.ScheduledRouteTemplates.indexOf(item) > -1) return;
        $this.ScheduledRouteTemplates.push(item);
        if (item.Owner != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate.setOwner(item, $this);
        }
    }
    static addRangeScheduledRouteTemplates = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addScheduledRouteTemplates($this, item));
    }
    static removeScheduledRouteTemplates = ($this, item) => {
        if ($this == null || $this.ScheduledRouteTemplates == null || $this.ScheduledRouteTemplates.indexOf(item) === -1) return;
        var _index = $this.ScheduledRouteTemplates.indexOf(item);
        $this.ScheduledRouteTemplates.splice(_index, 1);
        item.Owner = null;
    }
    static clearScheduledRouteTemplates = ($this) => {
        $this.ScheduledRouteTemplates = null;
    }
    static setWorkContract = ($this, items) => {
        if (items == null) items = [];
        if ($this.WorkContract == null) $this.WorkContract = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.WorkContract.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.removeWorkContract($this, $this.WorkContract[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addManyWorkContract($this, copyItems);
    }
    static addManyWorkContract = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addWorkContract($this, items[i]);
        }
    }
    static addWorkContract = ($this, item) => {
        if ($this.WorkContract == null) $this.WorkContract = [];
        if (item == null || $this.WorkContract.indexOf(item) > -1) return;
        $this.WorkContract.push(item);
        if (item.RegionalAgent != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract.setRegionalAgent(item, $this);
        }
    }
    static addRangeWorkContract = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addWorkContract($this, item));
    }
    static removeWorkContract = ($this, item) => {
        if ($this == null || $this.WorkContract == null || $this.WorkContract.indexOf(item) === -1) return;
        var _index = $this.WorkContract.indexOf(item);
        $this.WorkContract.splice(_index, 1);
        item.RegionalAgent = null;
    }
    static clearWorkContract = ($this) => {
        $this.WorkContract = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class GeoCoordinates  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.GeoCoordinates";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Latitude:
    any;
Longitude:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class GeoArea  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.GeoArea";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Area:
    any;
PostalCode:
    any;
County:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum TruckContent {
    Frozen,
    Dry,
    Mixed,
    Maintenance,
}

export class Truck  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Truck";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
PlateNumber:
    any;
Type:
    any;
Content:
    any;
CurrentLocation:
    any;
RegionalAgent:
    any;
TruckDriver:
    any;
    static setCurrentLocation = ($this, value) => {
        var oldValue = $this.CurrentLocation;
        $this.CurrentLocation = value;
        if (value != null) {
        }
    }
    static setRegionalAgent = ($this, value) => {
        var oldValue = $this.RegionalAgent;
        $this.RegionalAgent = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.removeTrucks(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addTrucks(value, $this);
        }
    }
    static setTruckDriver = ($this, value) => {
        var oldValue = $this.TruckDriver;
        $this.TruckDriver = value;
        if (value != null) {
            if (oldValue != null && oldValue.Truck != null) {
                oldValue.Truck = null;
            }
            if ($this.TruckDriver.Truck !== $this) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckDriver.setTruck(value, $this);
            }
        }
    }
    static NewOperation($this: any): any{let is = "ok";

                                            }
        static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrdersPerMonth  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.OrdersPerMonth";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Label:
    any;
Value:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ChartWorkaround  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.ChartWorkaround";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Label:
    any;
Value:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class MapPoints  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.MapPoints";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Lat:
    any;
Long:
    any;
Title:
    any;
Type:
    any;
Icon:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class OrderGenerator  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderGenerator";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.OrderGeneratorKey = 0;
    }
OrderGeneratorKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.OrderGeneratorKey == null || $this.OrderGeneratorKey == 0;
    }
}

export class PubSub  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.PubSub";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.PubSubKey = 0;
    }
PubSubKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.PubSubKey == null || $this.PubSubKey == 0;
    }
}

export class Utils  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Utils";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.UtilsKey = 0;
    }
UtilsKey:
    any;
    static DesirializePubMessage(message: any,objectType: any): any{if ((Joove.Common.nullSafe<any>(() => CLMS.Framework.String.IsNullOrEmpty(objectType), false))) {}

switch ((objectType)) {
case "OrderWMS": {
    let order = Joove.Common.nullSafe<any>(() => DSS3_LogisticsPoolingForUrbanDistribution.BO.Utils.InitOrderWMS(message), null);
        break;
    }
    }

                                                                   }
    static InitOrderWMS(message: any): any{let order = Joove.Common.nullSafe<any>(() => new DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderWMS(), null);

                                               for (let _iattr = 0; _iattr < (message == null ? 0 : message.length); _iattr++) {
    var attr = message[_iattr];
        switch ((Joove.Common.nullSafe<any>(() => attr.key, ""))) {
        case "OrdID": {
            order.OrdID = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdOrderID_Remote": {
            order.OrdOrderID_Remote = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdOrderExternalCode": {
            order.OrdOrderExternalCode = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdOrderDescr": {
            order.OrdOrderDescr = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdRegDateTime": {
            order.OrdRegDateTime = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe<any>(() => attr.val, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(), new Date('1753-01-01'));
            break;
        }
        case "OrdDateTime": {
            order.OrdDateTime = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe<any>(() => attr.val, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(), new Date('1753-01-01'));
            break;
        }
        case "OrdDeliveryDateTime": {
            order.OrdDeliveryDateTime = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe<any>(() => attr.val, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(), new Date('1753-01-01'));
            break;
        }
        case "OrdDepositorCode": {
            order.OrdDepositorCode = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDepositorFullName": {
            order.OrdDepositorFullName = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdCustomerCode": {
            order.OrdCustomerCode = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdCustomerFullName": {
            order.OrdCustomerFullName = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdStatus": {
            order.OrdStatus = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdMemo": {
            order.OrdMemo = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdPurpose": {
            order.OrdPurpose = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDeliveryval": {
            order.OrdDeliveryValue = Joove.Common.nullSafe<any>(() => CLMS.Framework.Float.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdDeliveryNotes": {
            order.OrdDeliveryNotes = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdIsReturn": {
            order.OrdIsReturn = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdPrdTypeDescr": {
            order.OrdPrdTypeDescr = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdWrhRoutingCode": {
            order.OrdWrhRoutingCode = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDlsId": {
            order.OrdDlsId = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdDlsDescr": {
            order.OrdDlsDescr = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDlsCity": {
            order.OrdDlsCity = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDlsArea": {
            order.OrdDlsArea = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDlsAddress": {
            order.OrdDlsAddress = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdDlsZipCode": {
            order.OrdDlsZipCode = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdRoutingStatus": {
            order.OrdRoutingStatus = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdBar": {
            order.OrdLfdBar = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdCtn": {
            order.OrdLfdCtn = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdPalElsa": {
            order.OrdLfdPalElsa = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdPalEuro": {
            order.OrdLfdPalEuro = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdPalInd": {
            order.OrdLfdPalInd = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdParOU": {
            order.OrdLfdParOU = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdVar": {
            order.OrdLfdVar = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdVol": {
            order.OrdLfdVol = Joove.Common.nullSafe<any>(() => CLMS.Framework.Float.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdLfdWeight": {
            order.OrdLfdWeight = Joove.Common.nullSafe<any>(() => CLMS.Framework.Float.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdVoucherId": {
            order.OrdVoucherId = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdVoucherDateTime": {
            order.OrdVoucherDateTime = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe<any>(() => attr.val, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(), new Date('1753-01-01'));
            break;
        }
        case "OrdVoucherNumber": {
            order.OrdVoucherNumber = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdVoucherSeries": {
            order.OrdVoucherSeries = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdAgencyCode": {
            order.OrdAgencyCode = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdAgencyAddress": {
            order.OrdAgencyAddress = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdAgencyDescr": {
            order.OrdAgencyDescr = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdTelRouteId": {
            break;
        }
        case "OrdVchRouteNr": {
            order.OrdVchRouteNr = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "OrdVchPlateNr": {
            order.OrdVchPlateNr = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdVhrID": {
            break;
        }
        case "OrdVhrDate": {
            order.OrdVhrDate = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe<any>(() => attr.val, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(), new Date('1753-01-01'));
            break;
        }
        case "OrdLastUpdateDateTime": {
            order.OrdLastUpdateDateTime = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ParseExact(Joove.Common.nullSafe<any>(() => attr.val, ""), Joove.Core.ApplicationLocale(), "yyyy-MM-ddThh-mm-ss").toDate(), new Date('1753-01-01'));
            break;
        }
        case "OrdReadyForLoading": {
            order.OrdReadyForLoading = Joove.Common.nullSafe<any>(() => CLMS.Framework.Integer.Parse(Joove.Common.nullSafe<any>(() => attr.val, "")), 0);
            break;
        }
        case "Polyline": {
            order.Polyline = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        case "OrdStatusString": {
            order.OrdStatusString = Joove.Common.nullSafe<any>(() => attr.val, "");
            break;
        }
        }
    }

    return order;

                                          }
    static InitPubMessage(obj: any): any{let messages = [];

                                             let type = Joove.Common.nullSafe<any>(() => obj.GetType(), null);

                                             let properties = Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.ThrowException("type()").Test, null);

                                             for (let _iproperty = 0; _iproperty < (properties == null ? 0 : properties.length); _iproperty++) {
    var property = properties[_iproperty];
        let value = Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.ThrowException("property(obj)").Test, null);
        let name = Joove.Common.nullSafe<any>(() => property.Name, "");
        let datatype = Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.ThrowException("StdLib.RuntimeType.Name()").Test, "");
        Joove.Common.nullSafe<any>(() => CLMS.Framework.Utilities.DebugHelper.Log(CLMS.Framework.Utilities.DebugMessageType.Info, "property value " + value + " property Name " + name + " property type " + datatype), null);
        if ((value == null)) {
            value = "";
        }
        let message = Joove.Common.nullSafe<any>(() => new DSS3_LogisticsPoolingForUrbanDistribution.BO.PubMessage(), null);
        if ((datatype == "Guid")) {
            continue;
        }
        let valueString = Joove.Common.nullSafe<any>(() => value.toString(), "");
        if ((Joove.Common.nullSafe<any>(() => Joove.Common.stringContains(valueString, "Sarmed", true), false))) {
            continue;
        }
        if ((Joove.Common.nullSafe<any>(() => Joove.Common.stringContains(datatype, "Date"), false))) {
            message.type = "DateTime";
            message.key = name;
            let time = Joove.Common.cast(value, "DateTime?");
            message.val = Joove.Common.nullSafe<any>(() => CLMS.Framework.DateTime.ToString(time, "yyyy-MM-ddThh-mm-ss"), "");
        }
        if ((datatype == "Int64")) {
            message.type = "long";
            message.key = name;
            message.val = Joove.Common.nullSafe<any>(() => value.toString(), "");
        }
        if ((datatype == "Int32")) {
            message.type = "int";
            message.key = name;
            message.val = Joove.Common.nullSafe<any>(() => value.toString(), "");
        }
        if ((datatype == "Single")) {
            message.type = "double";
            message.key = name;
            message.val = Joove.Common.nullSafe<any>(() => value.toString(), "");
        }
        if ((datatype == "String")) {
            message.type = "string";
            message.key = name;
            message.val = Joove.Common.cast(value, "string");
        }
        Joove.Common.nullSafe<any>(() => messages.add(message), null);
    }

    return messages;

                                        }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UtilsKey == null || $this.UtilsKey == 0;
    }
}

export class PubMessage  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.PubMessage";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.PubMessageKey = 0;
    }
key:
    any;
val:
    any;
type:
    any;
PubMessageKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.PubMessageKey == null || $this.PubMessageKey == 0;
    }
}

export class GPSLocation  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.GPSLocation";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.GPSLocationKey = 0;
    }
order_id:
    any;
truck_license_plate:
    any;
timestamp:
    any;
latitude:
    any;
longitude:
    any;
GPSLocationKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.GPSLocationKey == null || $this.GPSLocationKey == 0;
    }
}

export class TruckRecommendation  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckRecommendation";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.TruckRecommendationKey = 0;
    }
order_id:
    any;
trucks_recommended:
    any;
TruckRecommendationKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.TruckRecommendationKey == null || $this.TruckRecommendationKey == 0;
    }
}

export class truck_eta  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.truck_eta";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.truck_etaKey = 0;
    }
truck_license_plate:
    any;
eta:
    any;
order_id:
    any;
truck_etaKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.truck_etaKey == null || $this.truck_etaKey == 0;
    }
}

export class truck_emission  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.truck_emission";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.truck_emissionKey = 0;
    }
truck_license_plate:
    any;
co2_emission:
    any;
truck_emissionKey:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.truck_emissionKey == null || $this.truck_emissionKey == 0;
    }
}

export class AVGTime  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.AVGTime";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
truck_license_plate:
    any;
avg_delivery_time:
    any;
Id:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DashboardStatistics  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.DashboardStatistics";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
OnTime:
    any;
InFull:
    any;
AsOrdered:
    any;
Impeachment:
    any;
TotalDelivered:
    any;
Supplier:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class StatePeriod  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.StatePeriod";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
StartDate:
    any;
EndDate:
    any;
Active:
    any;
State:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum State {
    Registration,
    Negotiation,
    Finalized,
}

export class ScheduledRouteTemplate  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.VisibleTo = [];
        this.VisibleToRAs = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Origin:
    any;
Destination:
    any;
DaysOfWeek:
    any;
PricePerPallet:
    any;
PricePerKilogram:
    any;
PricePerCubicMeter:
    any;
TotalAvailableCapacityKG:
    any;
EffectiveFrom:
    any;
EffectiveTo:
    any;
TypeOfGoods:
    any;
AvailableCapacityLaden:
    any;
CreatedOn:
    any;
Frequency:
    any;
IsPrivate:
    any;
TotalAvailableCapacityLaden:
    any;
TotalAvailableCapacityM3:
    any;
AvailableCapacityKG:
    any;
AvailableCapacityM3:
    any;
FixedPrice:
    any;
TruckPlate:
    any;
DeliveryDate:
    any;
ByRA:
    any;
Owner:
    any;
VisibleTo:
    any;
OwnerLSP:
    any;
VisibleToRAs:
    any;
    static setOwner = ($this, value) => {
        var oldValue = $this.Owner;
        $this.Owner = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.removeScheduledRouteTemplates(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addScheduledRouteTemplates(value, $this);
        }
    }
    static setVisibleTo = ($this, items) => {
        if (items == null) items = [];
        if ($this.VisibleTo == null) $this.VisibleTo = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.VisibleTo.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate.removeVisibleTo($this, $this.VisibleTo[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate.addManyVisibleTo($this, copyItems);
    }
    static addManyVisibleTo = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate.addVisibleTo($this, items[i]);
        }
    }
    static addVisibleTo = ($this, item) => {
        if ($this.VisibleTo == null) $this.VisibleTo = [];
        if (item == null || $this.VisibleTo.indexOf(item) > -1) return;
        $this.VisibleTo.push(item);
        LSP.addPrivateTemplates(item, $this);
    }
    static addRangeVisibleTo = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate.addVisibleTo($this, item));
    }
    static removeVisibleTo = ($this, item) => {
        if ($this == null || $this.VisibleTo == null || $this.VisibleTo.indexOf(item) === -1) return;
        var _index = $this.VisibleTo.indexOf(item);
        $this.VisibleTo.splice(_index, 1);
        LSP.removePrivateTemplates(item, $this);
    }
    static clearVisibleTo = ($this) => {
        $this.VisibleTo = null;
    }
    static setOwnerLSP = ($this, value) => {
        var oldValue = $this.OwnerLSP;
        $this.OwnerLSP = value;
        if (value != null) {
        }
    }
    static setVisibleToRAs = ($this, items) => {
        if (items == null) items = [];
        if ($this.VisibleToRAs == null) $this.VisibleToRAs = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.VisibleToRAs.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate.removeVisibleToRAs($this, $this.VisibleToRAs[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate.addManyVisibleToRAs($this, copyItems);
    }
    static addManyVisibleToRAs = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate.addVisibleToRAs($this, items[i]);
        }
    }
    static addVisibleToRAs = ($this, item) => {
        if ($this.VisibleToRAs == null) $this.VisibleToRAs = [];
        if (item == null || $this.VisibleToRAs.indexOf(item) > -1) return;
        $this.VisibleToRAs.push(item);
    }
    static addRangeVisibleToRAs = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate.addVisibleToRAs($this, item));
    }
    static removeVisibleToRAs = ($this, item) => {
        if ($this == null || $this.VisibleToRAs == null || $this.VisibleToRAs.indexOf(item) === -1) return;
        var _index = $this.VisibleToRAs.indexOf(item);
        $this.VisibleToRAs.splice(_index, 1);
    }
    static clearVisibleToRAs = ($this) => {
        $this.VisibleToRAs = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ScheduledRoute  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRoute";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Origin:
    any;
Destination:
    any;
DaysOfWeek:
    any;
PricePerPallet:
    any;
PricePerKilogram:
    any;
PricePerCubicMeter:
    any;
TotalAvailableCapacityKG:
    any;
EffectiveFrom:
    any;
EffectiveTo:
    any;
TypeOfGoods:
    any;
Revision:
    any;
GUID:
    any;
ReservedCapacityLaden:
    any;
State:
    any;
BaseId:
    any;
Frequency:
    any;
TotalAvailableCapacityM3:
    any;
TotalAvailableCapacityLaden:
    any;
ReservedCapacityKG:
    any;
ReservedCapacityM3:
    any;
FixedPrice:
    any;
OriginComments:
    any;
DestinationComments:
    any;
TruckPlate:
    any;
stringenum:
    any;
DeliveryDate:
    any;
Attribute:
    any;
WorkContract:
    any;
    static setWorkContract = ($this, value) => {
        var oldValue = $this.WorkContract;
        $this.WorkContract = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract.removeScheduledRoutes(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract.addScheduledRoutes(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum ScheduledRouteState {
    UnderNegotiation,
    PendingActionByLSP,
    PendingActionByRA,
    Finalized,
}

export enum RouteFrequency {
    Weekly,
    Biweekly,
    Monthly,
    Once,
}

export class WorkContract  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.ScheduledRoutes = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
CreationDate:
    any;
LastUpdate:
    any;
Status:
    any;
RegionalAgent:
    any;
ScheduledRoutes:
    any;
LSP:
    any;
    static setRegionalAgent = ($this, value) => {
        var oldValue = $this.RegionalAgent;
        $this.RegionalAgent = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.removeWorkContract(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addWorkContract(value, $this);
        }
    }
    static setScheduledRoutes = ($this, items) => {
        if (items == null) items = [];
        if ($this.ScheduledRoutes == null) $this.ScheduledRoutes = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ScheduledRoutes.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract.removeScheduledRoutes($this, $this.ScheduledRoutes[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract.addManyScheduledRoutes($this, copyItems);
    }
    static addManyScheduledRoutes = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract.addScheduledRoutes($this, items[i]);
        }
    }
    static addScheduledRoutes = ($this, item) => {
        if ($this.ScheduledRoutes == null) $this.ScheduledRoutes = [];
        if (item == null || $this.ScheduledRoutes.indexOf(item) > -1) return;
        $this.ScheduledRoutes.push(item);
        if (item.WorkContract != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRoute.setWorkContract(item, $this);
        }
    }
    static addRangeScheduledRoutes = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract.addScheduledRoutes($this, item));
    }
    static removeScheduledRoutes = ($this, item) => {
        if ($this == null || $this.ScheduledRoutes == null || $this.ScheduledRoutes.indexOf(item) === -1) return;
        var _index = $this.ScheduledRoutes.indexOf(item);
        $this.ScheduledRoutes.splice(_index, 1);
        item.WorkContract = null;
    }
    static clearScheduledRoutes = ($this) => {
        $this.ScheduledRoutes = null;
    }
    static setLSP = ($this, value) => {
        var oldValue = $this.LSP;
        $this.LSP = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.removeWorkContracts(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.addWorkContracts(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum ContractStatus {
    UnderNegotiation,
    Active,
    Archived,
}

export class ApplicationUserAction  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UserName:
    any;
ActiveRoles:
    any;
ActivePermissions:
    any;
Action:
    any;
Controller:
    any;
Date:
    any;
ErrorMessage:
    any;
Success:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserExternalProfile  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Gender:
    any;
Name:
    any;
Surname:
    any;
DisplayName:
    any;
Email:
    any;
Provider:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationSetting  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Key:
    any;
Value:
    any;
IsCustom:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUser  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUser";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.Permissions = [];
        this.Roles = [];
        this.Clients = [];
        this.Logins = [];
        this.Claims = [];
        this['_key'] = this.UserName = "";
    }
UserName:
    any;
PasswordHash:
    any;
SecurityStamp:
    any;
EmailConfirmed:
    any;
LockoutEnabled:
    any;
PhoneNumberConfirmed:
    any;
TwoFactorEnabled:
    any;
AccessFailedCount:
    any;
Name:
    any;
Email:
    any;
PhoneNumber:
    any;
LockoutEndDate:
    any;
Permissions:
    any;
Roles:
    any;
Clients:
    any;
Logins:
    any;
Claims:
    any;
Profile:
    any;
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.removePermissions($this, $this.Permissions[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addUsers(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeUsers(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static setRoles = ($this, items) => {
        if (items == null) items = [];
        if ($this.Roles == null) $this.Roles = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Roles.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.removeRoles($this, $this.Roles[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addManyRoles($this, copyItems);
    }
    static addManyRoles = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addRoles($this, items[i]);
        }
    }
    static addRoles = ($this, item) => {
        if ($this.Roles == null) $this.Roles = [];
        if (item == null || $this.Roles.indexOf(item) > -1) return;
        $this.Roles.push(item);
        ApplicationRole.addUsers(item, $this);
    }
    static addRangeRoles = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addRoles($this, item));
    }
    static removeRoles = ($this, item) => {
        if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1) return;
        var _index = $this.Roles.indexOf(item);
        $this.Roles.splice(_index, 1);
        ApplicationRole.removeUsers(item, $this);
    }
    static clearRoles = ($this) => {
        $this.Roles = null;
    }
    static setClients = ($this, items) => {
        if (items == null) items = [];
        if ($this.Clients == null) $this.Clients = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Clients.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.removeClients($this, $this.Clients[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addManyClients($this, copyItems);
    }
    static addManyClients = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addClients($this, items[i]);
        }
    }
    static addClients = ($this, item) => {
        if ($this.Clients == null) $this.Clients = [];
        if (item == null || $this.Clients.indexOf(item) > -1) return;
        $this.Clients.push(item);
        if (item.User != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationClient.setUser(item, $this);
        }
    }
    static addRangeClients = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addClients($this, item));
    }
    static removeClients = ($this, item) => {
        if ($this == null || $this.Clients == null || $this.Clients.indexOf(item) === -1) return;
        var _index = $this.Clients.indexOf(item);
        $this.Clients.splice(_index, 1);
        item.User = null;
    }
    static clearClients = ($this) => {
        $this.Clients = null;
    }
    static setLogins = ($this, items) => {
        if (items == null) items = [];
        if ($this.Logins == null) $this.Logins = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Logins.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.removeLogins($this, $this.Logins[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addManyLogins($this, copyItems);
    }
    static addManyLogins = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addLogins($this, items[i]);
        }
    }
    static addLogins = ($this, item) => {
        if ($this.Logins == null) $this.Logins = [];
        if (item == null || $this.Logins.indexOf(item) > -1) return;
        $this.Logins.push(item);
        if (item.User != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUserLogin.setUser(item, $this);
        }
    }
    static addRangeLogins = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addLogins($this, item));
    }
    static removeLogins = ($this, item) => {
        if ($this == null || $this.Logins == null || $this.Logins.indexOf(item) === -1) return;
        var _index = $this.Logins.indexOf(item);
        $this.Logins.splice(_index, 1);
        item.User = null;
    }
    static clearLogins = ($this) => {
        $this.Logins = null;
    }
    static setClaims = ($this, items) => {
        if (items == null) items = [];
        if ($this.Claims == null) $this.Claims = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Claims.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.removeClaims($this, $this.Claims[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addManyClaims($this, copyItems);
    }
    static addManyClaims = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addClaims($this, items[i]);
        }
    }
    static addClaims = ($this, item) => {
        if ($this.Claims == null) $this.Claims = [];
        if (item == null || $this.Claims.indexOf(item) > -1) return;
        $this.Claims.push(item);
        if (item.User != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUserClaim.setUser(item, $this);
        }
    }
    static addRangeClaims = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addClaims($this, item));
    }
    static removeClaims = ($this, item) => {
        if ($this == null || $this.Claims == null || $this.Claims.indexOf(item) === -1) return;
        var _index = $this.Claims.indexOf(item);
        $this.Claims.splice(_index, 1);
        item.User = null;
    }
    static clearClaims = ($this) => {
        $this.Claims = null;
    }
    static setProfile = ($this, value) => {
        var oldValue = $this.Profile;
        $this.Profile = value;
        if (value != null) {
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class ApplicationRole  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationRole";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.Users = [];
        this.Permissions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
IsCustom:
    any;
Users:
    any;
Permissions:
    any;
    static setUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.Users == null) $this.Users = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Users.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationRole.removeUsers($this, $this.Users[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationRole.addManyUsers($this, copyItems);
    }
    static addManyUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationRole.addUsers($this, items[i]);
        }
    }
    static addUsers = ($this, item) => {
        if ($this.Users == null) $this.Users = [];
        if (item == null || $this.Users.indexOf(item) > -1) return;
        $this.Users.push(item);
        ApplicationUser.addRoles(item, $this);
    }
    static addRangeUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationRole.addUsers($this, item));
    }
    static removeUsers = ($this, item) => {
        if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1) return;
        var _index = $this.Users.indexOf(item);
        $this.Users.splice(_index, 1);
        ApplicationUser.removeRoles(item, $this);
    }
    static clearUsers = ($this) => {
        $this.Users = null;
    }
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationRole.removePermissions($this, $this.Permissions[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationRole.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationRole.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addRoles(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationRole.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeRoles(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationOperation  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.Permissions = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
ParentControllerName:
    any;
Type:
    any;
IsAvailableToAnonymous:
    any;
IsAvailableToAllAuthorizedUsers:
    any;
Permissions:
    any;
    static setPermissions = ($this, items) => {
        if (items == null) items = [];
        if ($this.Permissions == null) $this.Permissions = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Permissions.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationOperation.removePermissions($this, $this.Permissions[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationOperation.addManyPermissions($this, copyItems);
    }
    static addManyPermissions = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationOperation.addPermissions($this, items[i]);
        }
    }
    static addPermissions = ($this, item) => {
        if ($this.Permissions == null) $this.Permissions = [];
        if (item == null || $this.Permissions.indexOf(item) > -1) return;
        $this.Permissions.push(item);
        ApplicationPermission.addOperations(item, $this);
    }
    static addRangePermissions = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationOperation.addPermissions($this, item));
    }
    static removePermissions = ($this, item) => {
        if ($this == null || $this.Permissions == null || $this.Permissions.indexOf(item) === -1) return;
        var _index = $this.Permissions.indexOf(item);
        $this.Permissions.splice(_index, 1);
        ApplicationPermission.removeOperations(item, $this);
    }
    static clearPermissions = ($this) => {
        $this.Permissions = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationPermission  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.Users = [];
        this.Roles = [];
        this.Operations = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
IsCustom:
    any;
Users:
    any;
Roles:
    any;
Operations:
    any;
    static setUsers = ($this, items) => {
        if (items == null) items = [];
        if ($this.Users == null) $this.Users = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Users.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationPermission.removeUsers($this, $this.Users[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationPermission.addManyUsers($this, copyItems);
    }
    static addManyUsers = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationPermission.addUsers($this, items[i]);
        }
    }
    static addUsers = ($this, item) => {
        if ($this.Users == null) $this.Users = [];
        if (item == null || $this.Users.indexOf(item) > -1) return;
        $this.Users.push(item);
        ApplicationUser.addPermissions(item, $this);
    }
    static addRangeUsers = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationPermission.addUsers($this, item));
    }
    static removeUsers = ($this, item) => {
        if ($this == null || $this.Users == null || $this.Users.indexOf(item) === -1) return;
        var _index = $this.Users.indexOf(item);
        $this.Users.splice(_index, 1);
        ApplicationUser.removePermissions(item, $this);
    }
    static clearUsers = ($this) => {
        $this.Users = null;
    }
    static setRoles = ($this, items) => {
        if (items == null) items = [];
        if ($this.Roles == null) $this.Roles = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Roles.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationPermission.removeRoles($this, $this.Roles[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationPermission.addManyRoles($this, copyItems);
    }
    static addManyRoles = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationPermission.addRoles($this, items[i]);
        }
    }
    static addRoles = ($this, item) => {
        if ($this.Roles == null) $this.Roles = [];
        if (item == null || $this.Roles.indexOf(item) > -1) return;
        $this.Roles.push(item);
        ApplicationRole.addPermissions(item, $this);
    }
    static addRangeRoles = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationPermission.addRoles($this, item));
    }
    static removeRoles = ($this, item) => {
        if ($this == null || $this.Roles == null || $this.Roles.indexOf(item) === -1) return;
        var _index = $this.Roles.indexOf(item);
        $this.Roles.splice(_index, 1);
        ApplicationRole.removePermissions(item, $this);
    }
    static clearRoles = ($this) => {
        $this.Roles = null;
    }
    static setOperations = ($this, items) => {
        if (items == null) items = [];
        if ($this.Operations == null) $this.Operations = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Operations.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationPermission.removeOperations($this, $this.Operations[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationPermission.addManyOperations($this, copyItems);
    }
    static addManyOperations = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationPermission.addOperations($this, items[i]);
        }
    }
    static addOperations = ($this, item) => {
        if ($this.Operations == null) $this.Operations = [];
        if (item == null || $this.Operations.indexOf(item) > -1) return;
        $this.Operations.push(item);
        ApplicationOperation.addPermissions(item, $this);
    }
    static addRangeOperations = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationPermission.addOperations($this, item));
    }
    static removeOperations = ($this, item) => {
        if ($this == null || $this.Operations == null || $this.Operations.indexOf(item) === -1) return;
        var _index = $this.Operations.indexOf(item);
        $this.Operations.splice(_index, 1);
        ApplicationOperation.removePermissions(item, $this);
    }
    static clearOperations = ($this) => {
        $this.Operations = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationClient  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationClient";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ClientKey:
    any;
IPAddress:
    any;
SessionId:
    any;
ConnectedOn:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.removeClients(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addClients(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserLogin  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LoginProvider:
    any;
ProviderKey:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.removeLogins(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addLogins(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationUserClaim  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.User = new this.Domain.ApplicationUser();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
ClaimType:
    any;
ClaimValue:
    any;
ClaimValueType:
    any;
Issuer:
    any;
OriginalIssuer:
    any;
User:
    any;
    static setUser = ($this, value) => {
        var oldValue = $this.User;
        $this.User = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.removeClaims(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationUser.addClaims(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ProfileSetting  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ProfileSetting";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Key:
    any;
Value:
    any;
ParentProfile:
    any;
    static setParentProfile = ($this, value) => {
        var oldValue = $this.ParentProfile;
        $this.ParentProfile = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.Profile.removeSettings(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Profile.addSettings(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class Profile  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.Profile";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.Settings = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LanguageLCID:
    any;
LocaleLCID:
    any;
Theme:
    any;
Settings:
    any;
    static setSettings = ($this, items) => {
        if (items == null) items = [];
        if ($this.Settings == null) $this.Settings = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Settings.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Profile.removeSettings($this, $this.Settings[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.Profile.addManySettings($this, copyItems);
    }
    static addManySettings = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Profile.addSettings($this, items[i]);
        }
    }
    static addSettings = ($this, item) => {
        if ($this.Settings == null) $this.Settings = [];
        if (item == null || $this.Settings.indexOf(item) > -1) return;
        $this.Settings.push(item);
        if (item.ParentProfile != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ProfileSetting.setParentProfile(item, $this);
        }
    }
    static addRangeSettings = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.Profile.addSettings($this, item));
    }
    static removeSettings = ($this, item) => {
        if ($this == null || $this.Settings == null || $this.Settings.indexOf(item) === -1) return;
        var _index = $this.Settings.indexOf(item);
        $this.Settings.splice(_index, 1);
        item.ParentProfile = null;
    }
    static clearSettings = ($this) => {
        $this.Settings = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationLanguage  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Code:
    any;
Icon:
    any;
DateTimeFormat:
    any;
    static setDateTimeFormat = ($this, value) => {
        var oldValue = $this.DateTimeFormat;
        $this.DateTimeFormat = value;
        if (value != null) {
            if (oldValue != null && oldValue.ApplicationLanguage != null) {
                oldValue.ApplicationLanguage = null;
            }
            if ($this.DateTimeFormat.ApplicationLanguage !== $this) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.DateTimeFormat.setApplicationLanguage(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class DateTimeFormat  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.ApplicationLanguage = new this.Domain.ApplicationLanguage();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
LongDatePattern:
    any;
LongTimePattern:
    any;
MonthDayPattern:
    any;
RFC1123Pattern:
    any;
ShortDatePattern:
    any;
ShortTimePattern:
    any;
YearMonthPattern:
    any;
ApplicationLanguage:
    any;
    static setApplicationLanguage = ($this, value) => {
        var oldValue = $this.ApplicationLanguage;
        $this.ApplicationLanguage = value;
        if (value != null) {
            if (oldValue != null && oldValue.DateTimeFormat != null) {
                oldValue.DateTimeFormat = null;
            }
            if ($this.ApplicationLanguage.DateTimeFormat !== $this) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.ApplicationLanguage.setDateTimeFormat(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class ApplicationTheme  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
Description:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class FileData  {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.FileData";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
Id:
    any;
FileName:
    any;
FolderPath:
    any;
MaxFileSize:
    any;
AllowedExtensions:
    any;
Blob:
    any;
StorageMedium:
    any;
UploadedBy:
    any;
UploadDateTime:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

export enum StorageMedium {
    FileSystem,
    DataBase,
}

export class AuditEntityConfiguration  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.Properties = [];
        this['_key'] = this.Id = 0;
    }
Id:
    any;
FullName:
    any;
ShortName:
    any;
Properties:
    any;
    static setProperties = ($this, items) => {
        if (items == null) items = [];
        if ($this.Properties == null) $this.Properties = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.Properties.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.AuditEntityConfiguration.removeProperties($this, $this.Properties[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.AuditEntityConfiguration.addManyProperties($this, copyItems);
    }
    static addManyProperties = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.AuditEntityConfiguration.addProperties($this, items[i]);
        }
    }
    static addProperties = ($this, item) => {
        if ($this.Properties == null) $this.Properties = [];
        if (item == null || $this.Properties.indexOf(item) > -1) return;
        $this.Properties.push(item);
        if (item.Entity != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.AuditPropertyConfiguration.setEntity(item, $this);
        }
    }
    static addRangeProperties = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.AuditEntityConfiguration.addProperties($this, item));
    }
    static removeProperties = ($this, item) => {
        if ($this == null || $this.Properties == null || $this.Properties.indexOf(item) === -1) return;
        var _index = $this.Properties.indexOf(item);
        $this.Properties.splice(_index, 1);
        item.Entity = null;
    }
    static clearProperties = ($this) => {
        $this.Properties = null;
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditPropertyConfiguration  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this.Entity = new this.Domain.AuditEntityConfiguration();
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Name:
    any;
DataType:
    any;
IsAuditable:
    any;
IsComplex:
    any;
IsCollection:
    any;
Entity:
    any;
    static setEntity = ($this, value) => {
        var oldValue = $this.Entity;
        $this.Entity = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.AuditEntityConfiguration.removeProperties(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.AuditEntityConfiguration.addProperties(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogEntry  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
UserName:
    any;
IPAddress:
    any;
EntityFullName:
    any;
EntityShortName:
    any;
EntityId:
    any;
Timestamp:
    any;
EntryTypeId:
    any;
ActionTypeId:
    any;
OldValue:
    any;
NewValue:
    any;
PropertyName:
    any;
ExtraField1:
    any;
ExtraField2:
    any;
ExtraField3:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogEntryType  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export class AuditLogPropertyActionType  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = 0;
    }
Id:
    any;
Code:
    any;
Name:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == 0;
    }
}

export enum WorkflowStatus {
    None,
    Completed,
    Pending,
    Expired,
    Cancelled,
    Failed,
    StepToContinueNotFound,
}

export class WorkflowExecutionResult  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowExecutionResult";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.WorkflowExecutionResultKey = 0;
    }
Status:
    any;
Context:
    any;
WorkflowExecutionResultKey:
    any;
    static setContext = ($this, value) => {
        var oldValue = $this.Context;
        $this.Context = value;
        if (value != null) {
            if (oldValue != null && oldValue.Result != null) {
                oldValue.Result = null;
            }
            if ($this.Context.Result !== $this) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkflowContextBase.setResult(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.WorkflowExecutionResultKey == null || $this.WorkflowExecutionResultKey == 0;
    }
}

export class WorkflowContextBase  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowContextBase";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
Name:
    any;
Error:
    any;
Expires:
    any;
ExpirationDateTime:
    any;
PendingSince:
    any;
PendingJobCreatedBy:
    any;
PendingStep:
    any;
Id:
    any;
Status:
    any;
Result:
    any;
    static setResult = ($this, value) => {
        var oldValue = $this.Result;
        $this.Result = value;
        if (value != null) {
            if (oldValue != null && oldValue.Context != null) {
                oldValue.Context = null;
            }
            if ($this.Result.Context !== $this) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkflowExecutionResult.setContext(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

export class WorkflowSchedule  {
    _originalTypeClassName = "zAppDev.DotNet.Framework.Workflow.WorkflowSchedule";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        this['_key'] = this.Workflow = "";
    }
Workflow:
    any;
Description:
    any;
StartDateTime:
    any;
ExpireOn:
    any;
CronExpression:
    any;
LastExecution:
    any;
LastExecutionMessage:
    any;
IsLastExecutionSuccess:
    any;
Active:
    any;
HumanReadableExpression:
    any;
NextExecutionTime:
    any;
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Workflow == null || $this.Workflow == "";
    }
}

export class Driver extends ApplicationUser {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.Driver";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        super();
        this['_key'] = this.UserName = "";
    }
Id:
    any;
Employer:
    any;
    static setEmployer = ($this, value) => {
        var oldValue = $this.Employer;
        $this.Employer = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.Location.removeDriver(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.Location.addDriver(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class LSPUser extends ApplicationUser {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.LSPUser";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        super();
        this['_key'] = this.UserName = "";
    }
LSP:
    any;
    static setLSP = ($this, value) => {
        var oldValue = $this.LSP;
        $this.LSP = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.removeLSPUsers(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP.addLSPUsers(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class RegionalAgentUser extends ApplicationUser {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgentUser";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        super();
        this['_key'] = this.UserName = "";
    }
RegionalAgent:
    any;
    static setRegionalAgent = ($this, value) => {
        var oldValue = $this.RegionalAgent;
        $this.RegionalAgent = value;
        if (value != null) {
            if (oldValue != null) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.removeRAUsers(oldValue, $this);
            }
            DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent.addRAUsers(value, $this);
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class TruckDriver extends ApplicationUser {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckDriver";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        super();
        this.ProofOfDelivery = [];
        this['_key'] = this.UserName = "";
    }
ProofOfDelivery:
    any;
Truck:
    any;
    static setProofOfDelivery = ($this, items) => {
        if (items == null) items = [];
        if ($this.ProofOfDelivery == null) $this.ProofOfDelivery = [];

        const copyItems = Joove.Common.cloneObject(items);

        while ($this.ProofOfDelivery.length > 0) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckDriver.removeProofOfDelivery($this, $this.ProofOfDelivery[0]);
        }

        DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckDriver.addManyProofOfDelivery($this, copyItems);
    }
    static addManyProofOfDelivery = ($this, items) => {
        if (items == null) return;
        for (let i = 0; i < items.length; i++) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckDriver.addProofOfDelivery($this, items[i]);
        }
    }
    static addProofOfDelivery = ($this, item) => {
        if ($this.ProofOfDelivery == null) $this.ProofOfDelivery = [];
        if (item == null || $this.ProofOfDelivery.indexOf(item) > -1) return;
        $this.ProofOfDelivery.push(item);
        if (item.TruckDriver != $this) {
            DSS3_LogisticsPoolingForUrbanDistribution.BO.ProofOfDelivery.setTruckDriver(item, $this);
        }
    }
    static addRangeProofOfDelivery = ($this, items: System.Collections.List<any>) => {
        items.forEach(item => DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckDriver.addProofOfDelivery($this, item));
    }
    static removeProofOfDelivery = ($this, item) => {
        if ($this == null || $this.ProofOfDelivery == null || $this.ProofOfDelivery.indexOf(item) === -1) return;
        var _index = $this.ProofOfDelivery.indexOf(item);
        $this.ProofOfDelivery.splice(_index, 1);
        item.TruckDriver = null;
    }
    static clearProofOfDelivery = ($this) => {
        $this.ProofOfDelivery = null;
    }
    static setTruck = ($this, value) => {
        var oldValue = $this.Truck;
        $this.Truck = value;
        if (value != null) {
            if (oldValue != null && oldValue.TruckDriver != null) {
                oldValue.TruckDriver = null;
            }
            if ($this.Truck.TruckDriver !== $this) {
                DSS3_LogisticsPoolingForUrbanDistribution.BO.Truck.setTruckDriver(value, $this);
            }
        }
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.UserName == null || $this.UserName == "";
    }
}

export class WorkflowSockContext extends WorkflowContextBase {
    _originalTypeClassName = "DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkflowSockContext";
    Domain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
    constructor() {
        super();
        this['_key'] = this.Id = "00000000-0000-0000-0000-000000000000";
    }
    static IsNew($this: any): boolean {
        if ($this == null) return true;
        return $this.Id == null || $this.Id == "00000000-0000-0000-0000-000000000000";
    }
}

}
var _appDomain = DSS3_LogisticsPoolingForUrbanDistribution.BO;
window.$domain = _appDomain;
