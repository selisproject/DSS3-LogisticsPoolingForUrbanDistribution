// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Web;
using zAppDev.DotNet.Framework.Utilities;
using zAppDev.DotNet.Framework.Data.Domain;
using NHibernate;
using NHibernate.Linq;
using DSS3_LogisticsPoolingForUrbanDistribution.BO;
using log4net;
using NHibernate.Action;
using NHibernate.Engine;
using zAppDev.DotNet.Framework.Data;
using zAppDev.DotNet.Framework.Data.DAL;
using zAppDev.DotNet.Framework.Workflow;
using zAppDev.DotNet.Framework.Auditing;
using zAppDev.DotNet.Framework.Identity.Model;
using zAppDev.DotNet.Framework.Identity;

namespace DSS3_LogisticsPoolingForUrbanDistribution.DAL
{
    public class RepositoryBuilder : IRepositoryBuilder
    {
        public ICreateRepository CreateCreateRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IDeleteRepository CreateDeleteRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IRetrieveRepository CreateRetrieveRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IUpdateRepository CreateUpdateRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IWorkflowRepository CreateWorkflowRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IIdentityRepository CreateIdentityRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }

        public IAuditingRepository CreateAuditingRepository(MiniSessionManager manager)
        {
            return new Repository(manager);
        }
    }

    public class Repository : IRepository
    {
        public static List<string> SystemClassNames = new List<string>()
        { "ApplicationUserAction","ApplicationUserExternalProfile","ApplicationSetting","ApplicationUser","ApplicationRole","ApplicationOperation","ApplicationPermission","ApplicationClient","ApplicationUserLogin","ApplicationUserClaim","ProfileSetting","Profile","ApplicationLanguage","DateTimeFormat","ApplicationTheme","FileData","StorageMedium","AuditEntityConfiguration","AuditPropertyConfiguration","AuditLogEntry","AuditLogEntryType","AuditLogPropertyActionType","WorkflowStatus","WorkflowExecutionResult","WorkflowContextBase","WorkflowSchedule"
        };

        private readonly ISession _currentSession;
        private readonly MiniSessionManager _sessionManager;

        public Repository(MiniSessionManager manager = null)
        {
            _sessionManager = manager;
            if (_sessionManager == null)
            {
                _sessionManager = MiniSessionManager.Instance;
            }
            // Make sure the session is open
            _sessionManager.OpenSession();
            _currentSession = _sessionManager.Session;
        }

        // For using without a MiniSessionManager
        public Repository(ISession session)
        {
            _currentSession = session;
            _sessionManager = new MiniSessionManager();
        }

        private RepositoryAction? _prevAction;
        private void SetCurrentActionTo(RepositoryAction? action)
        {
            if (_sessionManager == null) return;
            _prevAction = _sessionManager.LastAction;
            _sessionManager.LastAction = (action ?? _prevAction ?? RepositoryAction.NONE);
        }

        private void RestoreLastAction()
        {
            SetCurrentActionTo(null);
        }

        #region Implementation of IRepository

        public void DeleteActivity(DSS3_LogisticsPoolingForUrbanDistribution.BO.Activity activity, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(activity == null || activity.IsTransient()) return;
            activity.Point = null;
            activity.Order = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Route>(ap=> ap.Activities.Contains(activity)))
            {
                toDissasociate.RemoveActivities(activity);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Activity>(activity, isCascaded);
        }
        public void DeleteAmortizationType(DSS3_LogisticsPoolingForUrbanDistribution.BO.AmortizationType amortizationtype, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(amortizationtype == null || amortizationtype.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Vehicule>(ap=> ap.AmortizationType1 == amortizationtype))
            {
                toDissasociate.AmortizationType1 = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.AmortizationType>(amortizationtype, isCascaded);
        }
        public void DeleteApplicationClient(zAppDev.DotNet.Framework.Identity.Model.ApplicationClient applicationclient, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationclient == null || applicationclient.IsTransient()) return;
            applicationclient.User = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationClient>(applicationclient, isCascaded);
        }
        public void DeleteApplicationLanguage(zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage applicationlanguage, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationlanguage == null || applicationlanguage.IsTransient()) return;
            if (applicationlanguage.DateTimeFormat != null)
            {
                var toDelete = applicationlanguage.DateTimeFormat;
                applicationlanguage.DateTimeFormat.ApplicationLanguage = null;
                applicationlanguage.DateTimeFormat = null;
                DeleteDateTimeFormat(toDelete, false, isCascaded, applicationlanguage);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage>(applicationlanguage, isCascaded);
        }
        public void DeleteApplicationOperation(zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation applicationoperation, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationoperation == null || applicationoperation.IsTransient()) return;
            if (applicationoperation.Permissions.Count > 0)
            {
                var cs = new System.Data.ConstraintException("applicationoperation.Permissions elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "ApplicationOperation";
                cs.Data["PropertyName"] = "Permissions";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation>(applicationoperation, isCascaded);
        }
        public void DeleteApplicationPermission(zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission applicationpermission, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationpermission == null || applicationpermission.IsTransient()) return;
            if (applicationpermission.Roles.Count > 0)
            {
                var cs = new System.Data.ConstraintException("applicationpermission.Roles elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "ApplicationPermission";
                cs.Data["PropertyName"] = "Roles";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            if (applicationpermission.Users.Count > 0)
            {
                var cs = new System.Data.ConstraintException("applicationpermission.Users elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "ApplicationPermission";
                cs.Data["PropertyName"] = "Users";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            foreach (var toDissasociate in applicationpermission.Operations)
            {
                applicationpermission.RemoveOperations(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission>(applicationpermission, isCascaded);
        }
        public void DeleteApplicationRole(zAppDev.DotNet.Framework.Identity.Model.ApplicationRole applicationrole, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationrole == null || applicationrole.IsTransient()) return;
            if (applicationrole.Users.Count > 0)
            {
                var cs = new System.Data.ConstraintException("applicationrole.Users elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "ApplicationRole";
                cs.Data["PropertyName"] = "Users";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            foreach (var toDissasociate in applicationrole.Permissions)
            {
                applicationrole.RemovePermissions(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationRole>(applicationrole, isCascaded);
        }
        public void DeleteApplicationSetting(zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting applicationsetting, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationsetting == null || applicationsetting.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting>(applicationsetting, isCascaded);
        }
        public void DeleteApplicationTheme(zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme applicationtheme, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationtheme == null || applicationtheme.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme>(applicationtheme, isCascaded);
        }
        public void DeleteApplicationUser(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser applicationuser, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuser == null || applicationuser.IsTransient()) return;
            foreach (var toDelete in applicationuser.Clients)
            {
                applicationuser.RemoveClients(toDelete);
                DeleteApplicationClient(toDelete, false, isCascaded);
            }
            foreach (var toDelete in applicationuser.Logins)
            {
                applicationuser.RemoveLogins(toDelete);
                DeleteApplicationUserLogin(toDelete, false, isCascaded);
            }
            foreach (var toDelete in applicationuser.Claims)
            {
                applicationuser.RemoveClaims(toDelete);
                DeleteApplicationUserClaim(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in applicationuser.Permissions)
            {
                applicationuser.RemovePermissions(toDissasociate);
            }
            if (applicationuser.Profile != null)
            {
                var toDelete = applicationuser.Profile;
                applicationuser.Profile = null;
                DeleteProfile(toDelete, false, isCascaded, applicationuser);
            }
            foreach (var toDissasociate in applicationuser.Roles)
            {
                applicationuser.RemoveRoles(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(applicationuser, isCascaded);
        }
        public void DeleteApplicationUserAction(zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction applicationuseraction, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuseraction == null || applicationuseraction.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction>(applicationuseraction, isCascaded);
        }
        public void DeleteApplicationUserClaim(zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim applicationuserclaim, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuserclaim == null || applicationuserclaim.IsTransient()) return;
            applicationuserclaim.User = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim>(applicationuserclaim, isCascaded);
        }
        public void DeleteApplicationUserExternalProfile(zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile applicationuserexternalprofile, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuserexternalprofile == null || applicationuserexternalprofile.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile>(applicationuserexternalprofile, isCascaded);
        }
        public void DeleteApplicationUserLogin(zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin applicationuserlogin, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(applicationuserlogin == null || applicationuserlogin.IsTransient()) return;
            applicationuserlogin.User = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin>(applicationuserlogin, isCascaded);
        }
        public void DeleteAuditEntityConfiguration(zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration auditentityconfiguration, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditentityconfiguration == null || auditentityconfiguration.IsTransient()) return;
            foreach (var toDelete in auditentityconfiguration.Properties)
            {
                auditentityconfiguration.RemoveProperties(toDelete);
                DeleteAuditPropertyConfiguration(toDelete, false, isCascaded);
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration>(auditentityconfiguration, isCascaded);
        }
        public void DeleteAuditLogEntry(zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry auditlogentry, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditlogentry == null || auditlogentry.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry>(auditlogentry, isCascaded);
        }
        public void DeleteAuditLogEntryType(zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType auditlogentrytype, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditlogentrytype == null || auditlogentrytype.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType>(auditlogentrytype, isCascaded);
        }
        public void DeleteAuditLogPropertyActionType(zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType auditlogpropertyactiontype, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditlogpropertyactiontype == null || auditlogpropertyactiontype.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType>(auditlogpropertyactiontype, isCascaded);
        }
        public void DeleteAuditPropertyConfiguration(zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration auditpropertyconfiguration, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(auditpropertyconfiguration == null || auditpropertyconfiguration.IsTransient()) return;
            auditpropertyconfiguration.Entity = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration>(auditpropertyconfiguration, isCascaded);
        }
        public void DeleteAVGTime(DSS3_LogisticsPoolingForUrbanDistribution.BO.AVGTime avgtime, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(avgtime == null || avgtime.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.AVGTime>(avgtime, isCascaded);
        }
        public void DeleteChartWorkaround(DSS3_LogisticsPoolingForUrbanDistribution.BO.ChartWorkaround chartworkaround, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(chartworkaround == null || chartworkaround.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.ChartWorkaround>(chartworkaround, isCascaded);
        }
        public void DeleteCO2PerCarrier(DSS3_LogisticsPoolingForUrbanDistribution.BO.CO2PerCarrier co2percarrier, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(co2percarrier == null || co2percarrier.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.CO2PerCarrier>(co2percarrier, isCascaded);
        }
        public void DeleteComment(DSS3_LogisticsPoolingForUrbanDistribution.BO.Comment comment, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(comment == null || comment.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Comment>(comment, isCascaded);
        }
        public void DeleteCondition(DSS3_LogisticsPoolingForUrbanDistribution.BO.Condition condition, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(condition == null || condition.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment>(ap=> ap.AcceptedConditions.Contains(condition)))
            {
                toDissasociate.RemoveAcceptedConditions(condition);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Condition>(condition, isCascaded);
        }
        public void DeleteCoordinates(DSS3_LogisticsPoolingForUrbanDistribution.BO.Coordinates coordinates, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(coordinates == null || coordinates.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Location>(ap=> ap.Coordinates == coordinates))
            {
                toDissasociate.Coordinates = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Coordinates>(coordinates, isCascaded);
        }
        public void DeleteCostSplit(DSS3_LogisticsPoolingForUrbanDistribution.BO.CostSplit costsplit, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(costsplit == null || costsplit.IsTransient()) return;
            foreach (var toDissasociate in costsplit.Orders)
            {
                costsplit.RemoveOrders(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.CostSplit>(costsplit, isCascaded);
        }
        public void DeleteCustomVolume(DSS3_LogisticsPoolingForUrbanDistribution.BO.CustomVolume customvolume, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(customvolume == null || customvolume.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment>(ap=> ap.OccupiedVolume == customvolume))
            {
                toDissasociate.OccupiedVolume = null;
            }
            if (this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder>(ap=> ap.PlannedVolume.Contains(customvolume)).Count > 0)
            {
                var cs = new System.Data.ConstraintException("At least one ShippingOrder exists so CustomVolume cannot be deleted");
                cs.Data["Entity"] = "ShippingOrder";
                cs.Data["PropertyName"] = "PlannedVolume";
                cs.Data["Multiplicity"] = "0..1";
                throw cs;
            }
            foreach (var toDissasociate in customvolume.VolumeComposition)
            {
                customvolume.RemoveVolumeComposition(toDissasociate);
            }
            if (this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder>(ap=> ap.ActualVolume.Contains(customvolume)).Count > 0)
            {
                var cs = new System.Data.ConstraintException("At least one ShippingOrder exists so CustomVolume cannot be deleted");
                cs.Data["Entity"] = "ShippingOrder";
                cs.Data["PropertyName"] = "ActualVolume";
                cs.Data["Multiplicity"] = "0..1";
                throw cs;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.CustomVolume>(customvolume, isCascaded);
        }
        public void DeleteDateTimeFormat(zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat datetimeformat, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(datetimeformat == null || datetimeformat.IsTransient()) return;
            datetimeformat.ApplicationLanguage = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat>(datetimeformat, isCascaded);
        }
        public void DeleteDistanceCosts(DSS3_LogisticsPoolingForUrbanDistribution.BO.DistanceCosts distancecosts, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(distancecosts == null || distancecosts.IsTransient()) return;
            foreach (var toDissasociate in distancecosts.PropulsionTypeCost)
            {
                distancecosts.RemovePropulsionTypeCost(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Vehicule>(ap=> ap.DistanceCosts == distancecosts))
            {
                toDissasociate.DistanceCosts = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.DistanceCosts>(distancecosts, isCascaded);
        }
        public void DeleteDriver(DSS3_LogisticsPoolingForUrbanDistribution.BO.Driver driver, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(driver == null || driver.IsTransient()) return;
            foreach (var toDelete in driver.Clients)
            {
                driver.RemoveClients(toDelete);
                DeleteApplicationClient(toDelete, false, isCascaded);
            }
            foreach (var toDelete in driver.Logins)
            {
                driver.RemoveLogins(toDelete);
                DeleteApplicationUserLogin(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment>(ap=> ap.Driver == driver))
            {
                toDissasociate.Driver = null;
            }
            driver.Employer = null;
            foreach (var toDelete in driver.Claims)
            {
                driver.RemoveClaims(toDelete);
                DeleteApplicationUserClaim(toDelete, false, isCascaded);
            }
            if (driver.Profile != null)
            {
                var toDelete = driver.Profile;
                driver.Profile = null;
                DeleteProfile(toDelete, false, isCascaded, driver);
            }
            foreach (var toDissasociate in driver.Roles)
            {
                driver.RemoveRoles(toDissasociate);
            }
            foreach (var toDissasociate in driver.Permissions)
            {
                driver.RemovePermissions(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Driver>(driver, isCascaded);
        }
        public void DeleteFileData(DSS3_LogisticsPoolingForUrbanDistribution.BO.FileData filedata, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(filedata == null || filedata.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.FileData>(filedata, isCascaded);
        }
        public void DeleteGeoArea(DSS3_LogisticsPoolingForUrbanDistribution.BO.GeoArea geoarea, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(geoarea == null || geoarea.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent>(ap=> ap.AreaSupport.Contains(geoarea)))
            {
                toDissasociate.RemoveAreaSupport(geoarea);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.GeoArea>(geoarea, isCascaded);
        }
        public void DeleteGeoCoordinates(DSS3_LogisticsPoolingForUrbanDistribution.BO.GeoCoordinates geocoordinates, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(geocoordinates == null || geocoordinates.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Truck>(ap=> ap.CurrentLocation == geocoordinates))
            {
                toDissasociate.CurrentLocation = null;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Warehouse>(ap=> ap.GeoCoordinates == geocoordinates))
            {
                toDissasociate.GeoCoordinates = null;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent>(ap=> ap.AddressCoordinates == geocoordinates))
            {
                toDissasociate.AddressCoordinates = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.GeoCoordinates>(geocoordinates, isCascaded);
        }
        public void DeleteItemType(DSS3_LogisticsPoolingForUrbanDistribution.BO.ItemType itemtype, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(itemtype == null || itemtype.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder>(ap=> ap.ItemType == itemtype))
            {
                toDissasociate.ItemType = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.ItemType>(itemtype, isCascaded);
        }
        public void DeleteLegVolumeDetails(DSS3_LogisticsPoolingForUrbanDistribution.BO.LegVolumeDetails legvolumedetails, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(legvolumedetails == null || legvolumedetails.IsTransient()) return;
            legvolumedetails.Destination = null;
            legvolumedetails.Origin = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.PathVolumeDetail>(ap=> ap.Legs.Contains(legvolumedetails)))
            {
                toDissasociate.RemoveLegs(legvolumedetails);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.LegVolumeDetails>(legvolumedetails, isCascaded);
        }
        public void DeleteLocation(DSS3_LogisticsPoolingForUrbanDistribution.BO.Location location, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(location == null || location.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder>(ap=> ap.DeparturePoint == location))
            {
                toDissasociate.DeparturePoint = null;
            }
            foreach (var toDissasociate in location.Driver)
            {
                location.RemoveDriver(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder>(ap=> ap.ArrivalPoint == location))
            {
                toDissasociate.ArrivalPoint = null;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment>(ap=> ap.DeparturePoint == location))
            {
                toDissasociate.DeparturePoint = null;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.LegVolumeDetails>(ap=> ap.Origin == location))
            {
                toDissasociate.Origin = null;
            }
            location.Coordinates = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.LegVolumeDetails>(ap=> ap.Destination == location))
            {
                toDissasociate.Destination = null;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment>(ap=> ap.FinalDestination == location))
            {
                toDissasociate.FinalDestination = null;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Activity>(ap=> ap.Point == location))
            {
                toDissasociate.Point = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Location>(location, isCascaded);
        }
        public void DeleteLSP(DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP lsp, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(lsp == null || lsp.IsTransient()) return;
            foreach (var toDissasociate in lsp.PrivateTemplates)
            {
                lsp.RemovePrivateTemplates(toDissasociate);
            }
            foreach (var toDelete in lsp.WorkContracts)
            {
                lsp.RemoveWorkContracts(toDelete);
                DeleteWorkContract(toDelete, false, isCascaded);
            }
            foreach (var toDelete in lsp.LSPUsers)
            {
                lsp.RemoveLSPUsers(toDelete);
                DeleteLSPUser(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate>(ap=> ap.OwnerLSP == lsp))
            {
                toDissasociate.OwnerLSP = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP>(lsp, isCascaded);
        }
        public void DeleteLSPUser(DSS3_LogisticsPoolingForUrbanDistribution.BO.LSPUser lspuser, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(lspuser == null || lspuser.IsTransient()) return;
            foreach (var toDelete in lspuser.Clients)
            {
                lspuser.RemoveClients(toDelete);
                DeleteApplicationClient(toDelete, false, isCascaded);
            }
            lspuser.LSP = null;
            foreach (var toDelete in lspuser.Logins)
            {
                lspuser.RemoveLogins(toDelete);
                DeleteApplicationUserLogin(toDelete, false, isCascaded);
            }
            foreach (var toDelete in lspuser.Claims)
            {
                lspuser.RemoveClaims(toDelete);
                DeleteApplicationUserClaim(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in lspuser.Permissions)
            {
                lspuser.RemovePermissions(toDissasociate);
            }
            if (lspuser.Profile != null)
            {
                var toDelete = lspuser.Profile;
                lspuser.Profile = null;
                DeleteProfile(toDelete, false, isCascaded, lspuser);
            }
            foreach (var toDissasociate in lspuser.Roles)
            {
                lspuser.RemoveRoles(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.LSPUser>(lspuser, isCascaded);
        }
        public void DeleteMapPoints(DSS3_LogisticsPoolingForUrbanDistribution.BO.MapPoints mappoints, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(mappoints == null || mappoints.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.MapPoints>(mappoints, isCascaded);
        }
        public void DeleteOilType(DSS3_LogisticsPoolingForUrbanDistribution.BO.OilType oiltype, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(oiltype == null || oiltype.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.PropulsionTypeCost>(ap=> ap.OilType == oiltype))
            {
                toDissasociate.OilType = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.OilType>(oiltype, isCascaded);
        }
        public void DeleteOrdersPerMonth(DSS3_LogisticsPoolingForUrbanDistribution.BO.OrdersPerMonth orderspermonth, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(orderspermonth == null || orderspermonth.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.OrdersPerMonth>(orderspermonth, isCascaded);
        }
        public void DeleteOrderStatistics(DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderStatistics orderstatistics, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(orderstatistics == null || orderstatistics.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderStatistics>(orderstatistics, isCascaded);
        }
        public void DeleteOrderWMS(DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderWMS orderwms, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(orderwms == null || orderwms.IsTransient()) return;
            orderwms.ProofOfDelivery = null;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderWMS>(orderwms, isCascaded);
        }
        public void DeleteOwnershipCost(DSS3_LogisticsPoolingForUrbanDistribution.BO.OwnershipCost ownershipcost, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(ownershipcost == null || ownershipcost.IsTransient()) return;
            ownershipcost.Vehicule = null;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.OwnershipCost>(ownershipcost, isCascaded);
        }
        public void DeletePathVolumeDetail(DSS3_LogisticsPoolingForUrbanDistribution.BO.PathVolumeDetail pathvolumedetail, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(pathvolumedetail == null || pathvolumedetail.IsTransient()) return;
            foreach (var toDissasociate in pathvolumedetail.Legs)
            {
                pathvolumedetail.RemoveLegs(toDissasociate);
            }
            pathvolumedetail.Shipment = null;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.PathVolumeDetail>(pathvolumedetail, isCascaded);
        }
        public void DeletePoint(DSS3_LogisticsPoolingForUrbanDistribution.BO.Point point, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(point == null || point.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment>(ap=> ap.Path.Contains(point)))
            {
                toDissasociate.RemovePath(point);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Point>(point, isCascaded);
        }
        public void DeletePriority(DSS3_LogisticsPoolingForUrbanDistribution.BO.Priority priority, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(priority == null || priority.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Priority>(priority, isCascaded);
        }
        public void DeleteProfile(zAppDev.DotNet.Framework.Identity.Model.Profile profile, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(profile == null || profile.IsTransient()) return;
            foreach (var toDelete in profile.Settings)
            {
                profile.RemoveSettings(toDelete);
                DeleteProfileSetting(toDelete, false, isCascaded);
            }
            var _ApplicationUserApplicationUserProfilecount = this.Get<zAppDev.DotNet.Framework.Identity.Model.ApplicationUser>(ap=> ap.Profile == profile).Count;
            if (
                (calledBy != null)
                &&
                (
                    (calledBy.GetType() == typeof(zAppDev.DotNet.Framework.Identity.Model.ApplicationUser) || calledBy.GetType().FullName == "ApplicationUserProxy")  ||
                    (calledBy.GetType() == typeof(DSS3_LogisticsPoolingForUrbanDistribution.BO.Driver) || calledBy.GetType().FullName == "DriverProxy")  ||
                    (calledBy.GetType() == typeof(DSS3_LogisticsPoolingForUrbanDistribution.BO.LSPUser) || calledBy.GetType().FullName == "LSPUserProxy")  ||
                    (calledBy.GetType() == typeof(DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgentUser) || calledBy.GetType().FullName == "RegionalAgentUserProxy")  ||
                    (calledBy.GetType() == typeof(DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckDriver) || calledBy.GetType().FullName == "TruckDriverProxy")
                )
            ) _ApplicationUserApplicationUserProfilecount--;
            if (_ApplicationUserApplicationUserProfilecount > 0)
            {
                var cs = new System.Data.ConstraintException("At least one ApplicationUser exists so Profile cannot be deleted");
                cs.Data["Entity"] = "ApplicationUser";
                cs.Data["PropertyName"] = "Profile";
                cs.Data["Multiplicity"] = "0..1";
                throw cs;
            }
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.Profile>(profile, isCascaded);
        }
        public void DeleteProfileSetting(zAppDev.DotNet.Framework.Identity.Model.ProfileSetting profilesetting, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(profilesetting == null || profilesetting.IsTransient()) return;
            profilesetting.ParentProfile = null;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Identity.Model.ProfileSetting>(profilesetting, isCascaded);
        }
        public void DeleteProofOfDelivery(DSS3_LogisticsPoolingForUrbanDistribution.BO.ProofOfDelivery proofofdelivery, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(proofofdelivery == null || proofofdelivery.IsTransient()) return;
            proofofdelivery.TruckDriver = null;
            proofofdelivery.OrderWMS = null;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.ProofOfDelivery>(proofofdelivery, isCascaded);
        }
        public void DeletePropulsionTypeCost(DSS3_LogisticsPoolingForUrbanDistribution.BO.PropulsionTypeCost propulsiontypecost, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(propulsiontypecost == null || propulsiontypecost.IsTransient()) return;
            propulsiontypecost.OilType = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.DistanceCosts>(ap=> ap.PropulsionTypeCost.Contains(propulsiontypecost)))
            {
                toDissasociate.RemovePropulsionTypeCost(propulsiontypecost);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.PropulsionTypeCost>(propulsiontypecost, isCascaded);
        }
        public void DeleteReason(DSS3_LogisticsPoolingForUrbanDistribution.BO.Reason reason, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(reason == null || reason.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Reason>(reason, isCascaded);
        }
        public void DeleteRegionalAgent(DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent regionalagent, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(regionalagent == null || regionalagent.IsTransient()) return;
            if (regionalagent.AreaSupport.Count > 0)
            {
                var cs = new System.Data.ConstraintException("regionalagent.AreaSupport elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "RegionalAgent";
                cs.Data["PropertyName"] = "AreaSupport";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            foreach (var toDissasociate in regionalagent.Trucks)
            {
                regionalagent.RemoveTrucks(toDissasociate);
            }
            foreach (var toDelete in regionalagent.RAUsers)
            {
                regionalagent.RemoveRAUsers(toDelete);
                DeleteRegionalAgentUser(toDelete, false, isCascaded);
            }
            if (regionalagent.ScheduledRouteTemplates.Count > 0)
            {
                var cs = new System.Data.ConstraintException("regionalagent.ScheduledRouteTemplates elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "RegionalAgent";
                cs.Data["PropertyName"] = "ScheduledRouteTemplates";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate>(ap=> ap.VisibleToRAs.Contains(regionalagent)))
            {
                toDissasociate.RemoveVisibleToRAs(regionalagent);
            }
            if (regionalagent.AddressCoordinates != null)
            {
                var cs = new System.Data.ConstraintException("regionalagent.AddressCoordinates is restricted and cannot be deleted");
                cs.Data["Entity"] = "RegionalAgent";
                cs.Data["PropertyName"] = "AddressCoordinates";
                cs.Data["Multiplicity"] = "0..1";
                throw cs;
            }
            foreach (var toDelete in regionalagent.WorkContract)
            {
                regionalagent.RemoveWorkContract(toDelete);
                DeleteWorkContract(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in regionalagent.WarehousesSupport)
            {
                regionalagent.RemoveWarehousesSupport(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent>(regionalagent, isCascaded);
        }
        public void DeleteRegionalAgentUser(DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgentUser regionalagentuser, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(regionalagentuser == null || regionalagentuser.IsTransient()) return;
            foreach (var toDelete in regionalagentuser.Clients)
            {
                regionalagentuser.RemoveClients(toDelete);
                DeleteApplicationClient(toDelete, false, isCascaded);
            }
            regionalagentuser.RegionalAgent = null;
            foreach (var toDelete in regionalagentuser.Logins)
            {
                regionalagentuser.RemoveLogins(toDelete);
                DeleteApplicationUserLogin(toDelete, false, isCascaded);
            }
            foreach (var toDelete in regionalagentuser.Claims)
            {
                regionalagentuser.RemoveClaims(toDelete);
                DeleteApplicationUserClaim(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in regionalagentuser.Permissions)
            {
                regionalagentuser.RemovePermissions(toDissasociate);
            }
            if (regionalagentuser.Profile != null)
            {
                var toDelete = regionalagentuser.Profile;
                regionalagentuser.Profile = null;
                DeleteProfile(toDelete, false, isCascaded, regionalagentuser);
            }
            foreach (var toDissasociate in regionalagentuser.Roles)
            {
                regionalagentuser.RemoveRoles(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgentUser>(regionalagentuser, isCascaded);
        }
        public void DeleteRoute(DSS3_LogisticsPoolingForUrbanDistribution.BO.Route route, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(route == null || route.IsTransient()) return;
            foreach (var toDissasociate in route.Activities)
            {
                route.RemoveActivities(toDissasociate);
            }
            route.Vehicule = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Solution>(ap=> ap.Routes.Contains(route)))
            {
                toDissasociate.RemoveRoutes(route);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Route>(route, isCascaded);
        }
        public void DeleteScheduledRoute(DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRoute scheduledroute, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(scheduledroute == null || scheduledroute.IsTransient()) return;
            scheduledroute.WorkContract = null;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRoute>(scheduledroute, isCascaded);
        }
        public void DeleteScheduledRouteTemplate(DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate scheduledroutetemplate, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(scheduledroutetemplate == null || scheduledroutetemplate.IsTransient()) return;
            foreach (var toDissasociate in scheduledroutetemplate.VisibleTo)
            {
                scheduledroutetemplate.RemoveVisibleTo(toDissasociate);
            }
            scheduledroutetemplate.OwnerLSP = null;
            foreach (var toDissasociate in scheduledroutetemplate.VisibleToRAs)
            {
                scheduledroutetemplate.RemoveVisibleToRAs(toDissasociate);
            }
            scheduledroutetemplate.Owner = null;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate>(scheduledroutetemplate, isCascaded);
        }
        public void DeleteShipment(DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment shipment, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(shipment == null || shipment.IsTransient()) return;
            shipment.OccupiedVolume = null;
            foreach (var toDissasociate in shipment.ShippingOrders)
            {
                shipment.RemoveShippingOrders(toDissasociate);
            }
            foreach (var toDissasociate in shipment.AcceptedConditions)
            {
                shipment.RemoveAcceptedConditions(toDissasociate);
            }
            shipment.DeparturePoint = null;
            shipment.VehiculeType = null;
            shipment.Driver = null;
            foreach (var toDissasociate in shipment.Path)
            {
                shipment.RemovePath(toDissasociate);
            }
            shipment.FinalDestination = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.PathVolumeDetail>(ap=> ap.Shipment == shipment))
            {
                toDissasociate.Shipment = null;
            }
            foreach (var toDissasociate in shipment.ShipmentStatus)
            {
                shipment.RemoveShipmentStatus(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Route>(ap=> ap.Vehicule == shipment))
            {
                toDissasociate.Vehicule = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment>(shipment, isCascaded);
        }
        public void DeleteShipmentStatus(DSS3_LogisticsPoolingForUrbanDistribution.BO.ShipmentStatus shipmentstatus, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(shipmentstatus == null || shipmentstatus.IsTransient()) return;
            shipmentstatus.Status = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment>(ap=> ap.ShipmentStatus.Contains(shipmentstatus)))
            {
                toDissasociate.RemoveShipmentStatus(shipmentstatus);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.ShipmentStatus>(shipmentstatus, isCascaded);
        }
        public void DeleteShippingOrder(DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder shippingorder, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(shippingorder == null || shippingorder.IsTransient()) return;
            shippingorder.Parent = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Activity>(ap=> ap.Order == shippingorder))
            {
                toDissasociate.Order = null;
            }
            shippingorder.DeparturePoint = null;
            shippingorder.ArrivalPoint = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.CostSplit>(ap=> ap.Orders.Contains(shippingorder)))
            {
                toDissasociate.RemoveOrders(shippingorder);
            }
            foreach (var toDissasociate in shippingorder.Shipment)
            {
                shippingorder.RemoveShipment(toDissasociate);
            }
            shippingorder.ItemType = null;
            foreach (var toDissasociate in shippingorder.StatusEvolution)
            {
                shippingorder.RemoveStatusEvolution(toDissasociate);
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder>(ap=> ap.Parent == shippingorder))
            {
                toDissasociate.Parent = null;
            }
            foreach (var toDissasociate in shippingorder.ActualVolume)
            {
                shippingorder.RemoveActualVolume(toDissasociate);
            }
            foreach (var toDissasociate in shippingorder.PlannedVolume)
            {
                shippingorder.RemovePlannedVolume(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder>(shippingorder, isCascaded);
        }
        public void DeleteSolution(DSS3_LogisticsPoolingForUrbanDistribution.BO.Solution solution, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(solution == null || solution.IsTransient()) return;
            foreach (var toDissasociate in solution.Routes)
            {
                solution.RemoveRoutes(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Solution>(solution, isCascaded);
        }
        public void DeleteStatePeriod(DSS3_LogisticsPoolingForUrbanDistribution.BO.StatePeriod stateperiod, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(stateperiod == null || stateperiod.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.StatePeriod>(stateperiod, isCascaded);
        }
        public void DeleteStatus(DSS3_LogisticsPoolingForUrbanDistribution.BO.Status status, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(status == null || status.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.StatusEvolution>(ap=> ap.Status == status))
            {
                toDissasociate.Status = null;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.StatusRule>(ap=> ap.Status == status))
            {
                toDissasociate.Status = null;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.ShipmentStatus>(ap=> ap.Status == status))
            {
                toDissasociate.Status = null;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.StatusRule>(ap=> ap.ForcedStatus == status))
            {
                toDissasociate.ForcedStatus = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Status>(status, isCascaded);
        }
        public void DeleteStatusEvolution(DSS3_LogisticsPoolingForUrbanDistribution.BO.StatusEvolution statusevolution, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(statusevolution == null || statusevolution.IsTransient()) return;
            statusevolution.Status = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder>(ap=> ap.StatusEvolution.Contains(statusevolution)))
            {
                toDissasociate.RemoveStatusEvolution(statusevolution);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.StatusEvolution>(statusevolution, isCascaded);
        }
        public void DeleteStatusRule(DSS3_LogisticsPoolingForUrbanDistribution.BO.StatusRule statusrule, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(statusrule == null || statusrule.IsTransient()) return;
            statusrule.Status = null;
            statusrule.ForcedStatus = null;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.StatusRule>(statusrule, isCascaded);
        }
        public void DeleteSupplier(DSS3_LogisticsPoolingForUrbanDistribution.BO.Supplier supplier, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(supplier == null || supplier.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Volume>(ap=> ap.Supplier == supplier))
            {
                toDissasociate.Supplier = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Supplier>(supplier, isCascaded);
        }
        public void DeletetblZslBookingType(DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslBookingType tblzslbookingtype, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(tblzslbookingtype == null || tblzslbookingtype.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslBookingType>(ap=> ap.BookingType == tblzslbookingtype))
            {
                toDissasociate.BookingType = null;
            }
            tblzslbookingtype.BookingType = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslPlatformBookingOrder>(ap=> ap.tblZslBookingType == tblzslbookingtype))
            {
                toDissasociate.tblZslBookingType = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslBookingType>(tblzslbookingtype, isCascaded);
        }
        public void DeletetblZslCarrier(DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslCarrier tblzslcarrier, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(tblzslcarrier == null || tblzslcarrier.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslCarrier>(ap=> ap.Carrier == tblzslcarrier))
            {
                toDissasociate.Carrier = null;
            }
            tblzslcarrier.Carrier = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportExecutionPlan>(ap=> ap.tblZslCarrier == tblzslcarrier))
            {
                toDissasociate.tblZslCarrier = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslCarrier>(tblzslcarrier, isCascaded);
        }
        public void DeletetblZslCustomer(DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslCustomer tblzslcustomer, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(tblzslcustomer == null || tblzslcustomer.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslPlatformBookingOrder>(ap=> ap.tblZslCustomer == tblzslcustomer))
            {
                toDissasociate.tblZslCustomer = null;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportDetail>(ap=> ap.tblZslCustomer == tblzslcustomer))
            {
                toDissasociate.tblZslCustomer = null;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslCustomer>(ap=> ap.Customer == tblzslcustomer))
            {
                toDissasociate.Customer = null;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportEvent>(ap=> ap.tblZslCustomer == tblzslcustomer))
            {
                toDissasociate.tblZslCustomer = null;
            }
            tblzslcustomer.Customer = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportOrder>(ap=> ap.tblZslCustomer == tblzslcustomer))
            {
                toDissasociate.tblZslCustomer = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslCustomer>(tblzslcustomer, isCascaded);
        }
        public void DeletetblZslDeliveryStatus(DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslDeliveryStatus tblzsldeliverystatus, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(tblzsldeliverystatus == null || tblzsldeliverystatus.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslDeliveryStatus>(ap=> ap.DeliveryStatus == tblzsldeliverystatus))
            {
                toDissasociate.DeliveryStatus = null;
            }
            tblzsldeliverystatus.DeliveryStatus = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportExecutionPlan>(ap=> ap.tblZslDeliveryStatus == tblzsldeliverystatus))
            {
                toDissasociate.tblZslDeliveryStatus = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslDeliveryStatus>(tblzsldeliverystatus, isCascaded);
        }
        public void DeleteTblZslNormalisationSuggestion(DSS3_LogisticsPoolingForUrbanDistribution.BO.TblZslNormalisationSuggestion tblzslnormalisationsuggestion, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(tblzslnormalisationsuggestion == null || tblzslnormalisationsuggestion.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.TblZslNormalisationSuggestion>(tblzslnormalisationsuggestion, isCascaded);
        }
        public void DeletetblZslPlatformBookingOrder(DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslPlatformBookingOrder tblzslplatformbookingorder, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(tblzslplatformbookingorder == null || tblzslplatformbookingorder.IsTransient()) return;
            tblzslplatformbookingorder.tblZslTransportOrder = null;
            tblzslplatformbookingorder.PlatformBookingOrder = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslPlatformBookingOrder>(ap=> ap.PlatformBookingOrder == tblzslplatformbookingorder))
            {
                toDissasociate.PlatformBookingOrder = null;
            }
            tblzslplatformbookingorder.tblZslBookingType = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportDetail>(ap=> ap.tblZslPlatformBookingOrder == tblzslplatformbookingorder))
            {
                toDissasociate.tblZslPlatformBookingOrder = null;
            }
            tblzslplatformbookingorder.tblZslCustomer = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportExecutionPlan>(ap=> ap.tblZslPlatformBookingOrder == tblzslplatformbookingorder))
            {
                toDissasociate.tblZslPlatformBookingOrder = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslPlatformBookingOrder>(tblzslplatformbookingorder, isCascaded);
        }
        public void DeletetblZslRoute(DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslRoute tblzslroute, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(tblzslroute == null || tblzslroute.IsTransient()) return;
            tblzslroute.Route = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslRoute>(ap=> ap.Route == tblzslroute))
            {
                toDissasociate.Route = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslRoute>(tblzslroute, isCascaded);
        }
        public void DeletetblZslTransportDetail(DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportDetail tblzsltransportdetail, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(tblzsltransportdetail == null || tblzsltransportdetail.IsTransient()) return;
            tblzsltransportdetail.tblZslCustomer = null;
            tblzsltransportdetail.tblZslPlatformBookingOrder = null;
            tblzsltransportdetail.tblZslWorker = null;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportDetail>(tblzsltransportdetail, isCascaded);
        }
        public void DeletetblZslTransportEvent(DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportEvent tblzsltransportevent, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(tblzsltransportevent == null || tblzsltransportevent.IsTransient()) return;
            tblzsltransportevent.tblZslCustomer = null;
            tblzsltransportevent.tblZslWorker = null;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportEvent>(tblzsltransportevent, isCascaded);
        }
        public void DeletetblZslTransportExecutionPlan(DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportExecutionPlan tblzsltransportexecutionplan, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(tblzsltransportexecutionplan == null || tblzsltransportexecutionplan.IsTransient()) return;
            tblzsltransportexecutionplan.tblZslPlatformBookingOrder = null;
            tblzsltransportexecutionplan.tblZslCarrier = null;
            tblzsltransportexecutionplan.tblZslDeliveryStatus = null;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportExecutionPlan>(tblzsltransportexecutionplan, isCascaded);
        }
        public void DeletetblZslTransportOrder(DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportOrder tblzsltransportorder, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(tblzsltransportorder == null || tblzsltransportorder.IsTransient()) return;
            tblzsltransportorder.tblZslCustomer = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslPlatformBookingOrder>(ap=> ap.tblZslTransportOrder == tblzsltransportorder))
            {
                toDissasociate.tblZslTransportOrder = null;
            }
            tblzsltransportorder.TransportOrder = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportOrder>(ap=> ap.TransportOrder == tblzsltransportorder))
            {
                toDissasociate.TransportOrder = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportOrder>(tblzsltransportorder, isCascaded);
        }
        public void DeletetblZslWorker(DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslWorker tblzslworker, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(tblzslworker == null || tblzslworker.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportDetail>(ap=> ap.tblZslWorker == tblzslworker))
            {
                toDissasociate.tblZslWorker = null;
            }
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportEvent>(ap=> ap.tblZslWorker == tblzslworker))
            {
                toDissasociate.tblZslWorker = null;
            }
            tblzslworker.Worker = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslWorker>(ap=> ap.Worker == tblzslworker))
            {
                toDissasociate.Worker = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslWorker>(tblzslworker, isCascaded);
        }
        public void DeleteTimeCosts(DSS3_LogisticsPoolingForUrbanDistribution.BO.TimeCosts timecosts, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(timecosts == null || timecosts.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Vehicule>(ap=> ap.TimeCosts == timecosts))
            {
                toDissasociate.TimeCosts = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.TimeCosts>(timecosts, isCascaded);
        }
        public void DeleteTruck(DSS3_LogisticsPoolingForUrbanDistribution.BO.Truck truck, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(truck == null || truck.IsTransient()) return;
            truck.RegionalAgent = null;
            truck.CurrentLocation = null;
            truck.TruckDriver = null;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Truck>(truck, isCascaded);
        }
        public void DeleteTruckDriver(DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckDriver truckdriver, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(truckdriver == null || truckdriver.IsTransient()) return;
            foreach (var toDelete in truckdriver.Logins)
            {
                truckdriver.RemoveLogins(toDelete);
                DeleteApplicationUserLogin(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in truckdriver.ProofOfDelivery)
            {
                truckdriver.RemoveProofOfDelivery(toDissasociate);
            }
            foreach (var toDelete in truckdriver.Claims)
            {
                truckdriver.RemoveClaims(toDelete);
                DeleteApplicationUserClaim(toDelete, false, isCascaded);
            }
            truckdriver.Truck = null;
            foreach (var toDelete in truckdriver.Clients)
            {
                truckdriver.RemoveClients(toDelete);
                DeleteApplicationClient(toDelete, false, isCascaded);
            }
            foreach (var toDissasociate in truckdriver.Permissions)
            {
                truckdriver.RemovePermissions(toDissasociate);
            }
            if (truckdriver.Profile != null)
            {
                var toDelete = truckdriver.Profile;
                truckdriver.Profile = null;
                DeleteProfile(toDelete, false, isCascaded, truckdriver);
            }
            foreach (var toDissasociate in truckdriver.Roles)
            {
                truckdriver.RemoveRoles(toDissasociate);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckDriver>(truckdriver, isCascaded);
        }
        public void DeleteVehicule(DSS3_LogisticsPoolingForUrbanDistribution.BO.Vehicule vehicule, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(vehicule == null || vehicule.IsTransient()) return;
            vehicule.OwnershipCost = null;
            vehicule.DistanceCosts = null;
            vehicule.AmortizationType1 = null;
            vehicule.TimeCosts = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment>(ap=> ap.VehiculeType == vehicule))
            {
                toDissasociate.VehiculeType = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Vehicule>(vehicule, isCascaded);
        }
        public void DeleteVolume(DSS3_LogisticsPoolingForUrbanDistribution.BO.Volume volume, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(volume == null || volume.IsTransient()) return;
            volume.Supplier = null;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Volume>(volume, isCascaded);
        }
        public void DeleteVolumeComponent(DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumeComponent volumecomponent, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(volumecomponent == null || volumecomponent.IsTransient()) return;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumeComposition>(ap=> ap.VolumeComponent == volumecomponent))
            {
                toDissasociate.VolumeComponent = null;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumeComponent>(volumecomponent, isCascaded);
        }
        public void DeleteVolumeComposition(DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumeComposition volumecomposition, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(volumecomposition == null || volumecomposition.IsTransient()) return;
            volumecomposition.VolumeComponent = null;
            foreach (var toDissasociate in this.Get<DSS3_LogisticsPoolingForUrbanDistribution.BO.CustomVolume>(ap=> ap.VolumeComposition.Contains(volumecomposition)))
            {
                toDissasociate.RemoveVolumeComposition(volumecomposition);
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumeComposition>(volumecomposition, isCascaded);
        }
        public void DeleteVolumePerShipper(DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumePerShipper volumepershipper, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(volumepershipper == null || volumepershipper.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumePerShipper>(volumepershipper, isCascaded);
        }
        public void DeleteWarehouse(DSS3_LogisticsPoolingForUrbanDistribution.BO.Warehouse warehouse, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(warehouse == null || warehouse.IsTransient()) return;
            if (warehouse.GeoCoordinates != null)
            {
                var cs = new System.Data.ConstraintException("warehouse.GeoCoordinates is restricted and cannot be deleted");
                cs.Data["Entity"] = "Warehouse";
                cs.Data["PropertyName"] = "GeoCoordinates";
                cs.Data["Multiplicity"] = "0..1";
                throw cs;
            }
            if (warehouse.RegionalAgentsService.Count > 0)
            {
                var cs = new System.Data.ConstraintException("warehouse.RegionalAgentsService elements are restricted and cannot be deleted");
                cs.Data["Entity"] = "Warehouse";
                cs.Data["PropertyName"] = "RegionalAgentsService";
                cs.Data["Multiplicity"] = "*";
                throw cs;
            }
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.Warehouse>(warehouse, isCascaded);
        }
        public void DeleteWorkContract(DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract workcontract, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(workcontract == null || workcontract.IsTransient()) return;
            foreach (var toDelete in workcontract.ScheduledRoutes)
            {
                workcontract.RemoveScheduledRoutes(toDelete);
                DeleteScheduledRoute(toDelete, false, isCascaded);
            }
            workcontract.RegionalAgent = null;
            workcontract.LSP = null;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract>(workcontract, isCascaded);
        }
        public void DeleteWorkflowContextBase(zAppDev.DotNet.Framework.Workflow.WorkflowContextBase workflowcontextbase, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(workflowcontextbase == null || workflowcontextbase.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Workflow.WorkflowContextBase>(workflowcontextbase, isCascaded);
        }
        public void DeleteWorkflowSchedule(zAppDev.DotNet.Framework.Workflow.WorkflowSchedule workflowschedule, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(workflowschedule == null || workflowschedule.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<zAppDev.DotNet.Framework.Workflow.WorkflowSchedule>(workflowschedule, isCascaded);
        }
        public void DeleteWorkflowSockContext(DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkflowSockContext workflowsockcontext, bool doNotCallDeleteForThis = false, bool isCascaded = false, object calledBy = null)
        {
            if(workflowsockcontext == null || workflowsockcontext.IsTransient()) return;
            if (!doNotCallDeleteForThis) Delete<DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkflowSockContext>(workflowsockcontext, isCascaded);
        }


        #endregion

        #region Generic Data Retrieval
        public T GetById<T>(object id, bool throwIfNotFound = true) where T : class
        {
            SetCurrentActionTo(RepositoryAction.GET);
            var obj = _currentSession.Get<T>(id);

            if(throwIfNotFound && obj == null)
            {
                throw new ApplicationException($"No {typeof(T).Name} was found with key: {id}.");
            }

            if (!CanReadInstance(obj))
            {
                if (throwIfNotFound)
                {
                    throw new ApplicationException($"No Read Access for {typeof(T).Name} instance with key: {id}.");
                }
                else
                {
                    obj = null;
                }
            }

            RestoreLastAction();
            return obj;
        }

        public void SaveWithoutTransaction<T>(T entity) where T : class
        {
            try
            {
                _currentSession.SaveOrUpdate(entity);
            }
            catch (zAppDev.DotNet.Framework.Exceptions.BusinessException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Business Exception", e);
                throw;
            }
            catch (NHibernate.Exceptions.GenericADOException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error saving", e);
                throw;
            }
            catch (NonUniqueObjectException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error saving", e);
                throw;
            }
            catch(StaleObjectStateException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error saving", e);
                throw;
            }
            catch (Exception e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error saving", e);
                _currentSession.Merge(entity);
            }
        }

        public void Save<T>(T entity) where T : class
        {
            SetCurrentActionTo(RepositoryAction.SAVE);

            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity), "No " + typeof (T).Name + " was specified.");
            }

            SaveWithoutTransaction(entity);
            RestoreLastAction();
        }

        public void Insert<T>(T entity) where T : class
        {
            SetCurrentActionTo(RepositoryAction.INSERT);

            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity), "No " + typeof(T).Name + " was specified.");
            }

            try
            {
                _currentSession.Save(entity);
            }
            catch (zAppDev.DotNet.Framework.Exceptions.BusinessException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Business Exception", e);
                throw;
            }
            catch (NHibernate.Exceptions.GenericADOException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error inserting", e);
                throw;
            }
            catch (NonUniqueObjectException e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error inserting", e);
                throw;
            }
            catch (Exception e)
            {
                var log = LogManager.GetLogger(typeof(T));
                log.Error("Error inserting", e);
                _currentSession.Merge(entity);
            }

            RestoreLastAction();
        }

        public void Update<T>(T entity) where T : class
        {
            SetCurrentActionTo(RepositoryAction.UPDATE);
            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity), "No " + typeof(T).Name + " was specified.");
            }
            _currentSession.Update(entity);
            RestoreLastAction();
        }

        public void Delete<T>(T entity, bool isCascaded = false) where T : class
        {
            SetCurrentActionTo(RepositoryAction.DELETE);

            if (entity == null)
            {
                throw new ArgumentNullException(nameof(entity), "No " + typeof(T).Name + " was specified.");
            }

            // var exists = GetMainQuery<T>().WithOptions(options => options.SetCacheable(true)).Any(a => a == entity);
            // if (!exists)
            // {
            //    RestoreLastAction();
            //    return;
            // }

            try
            {
                _currentSession.Delete(entity);
            }
            catch (Exception e)
            {
                var log = LogManager.GetLogger(typeof (T));
                log.Error("Error deleting", e);
                throw;
            }

            RestoreLastAction();
        }

        public T Merge<T>(T entity) where T : class
        {
            return new ObjectGraphWalker().AssociateGraphWithSession(entity, MiniSessionManager.Instance);
        }

        public List<double> GeAggregates<T>(Expression<Func<T, bool>> predicate,
                                            Dictionary<Expression<Func<T, double>>, string> requestedAggregates)
        {
            var mainQuery = GetMainQuery<T>();
            List<double> aggregateValues = new List<double>();
            if (predicate == null)
            {
                predicate = a => true;
            }
            foreach (var entry in requestedAggregates)
            {
                try
                {
                    switch (entry.Value)
                    {
                    case "SUM":
                        aggregateValues.Add(mainQuery.Where(predicate).Sum(entry.Key));
                        break;
                    case "AVERAGE":
                        aggregateValues.Add(mainQuery.Where(predicate).Average(entry.Key));
                        break;
                    case "COUNT":
                        aggregateValues.Add(mainQuery.Where(predicate).Count());
                        break;
                    }
                }
                catch
                {
                    aggregateValues.Add(0);
                }
            }
            return aggregateValues;
        }

        private static IFutureValue<TResult> ToFutureValue<TSource, TResult>(IQueryable source, Expression<Func<IQueryable<TSource>, TResult>> selector)
        where TResult : struct
        {
            var provider = (DefaultQueryProvider)source.Provider;
            var method = ((MethodCallExpression)selector.Body).Method;
            var expression = Expression.Call(null, method, source.Expression);
            return provider.ExecuteFutureValue<TResult>(expression);
        }

        public List<T> Get<T>(Expression<Func<T, bool>> predicate,
                              int startRowIndex,
                              int pageSize,
                              Dictionary<Expression<Func<T, object>>, bool> orderBy,
                              out int totalRecords, bool cacheQuery = true)
        {
            if (orderBy == null)
            {
                orderBy = new Dictionary<Expression<Func<T, object>>, bool>();
            }
            if (predicate?.Body.NodeType == ExpressionType.Constant
                    && (((ConstantExpression)predicate.Body)).Value != null)
            {
                var val = (bool)(((ConstantExpression)predicate.Body)).Value;
                if (val)
                {
                    predicate = null;
                }
                else
                {
                    totalRecords = 0;
                    return new List<T>();
                }
            }
            var objects = GetMainQuery<T>();
            if (cacheQuery)
            {
                objects = objects.WithOptions(options => options.SetCacheable(true));
            }
            var futureCount = predicate == null
                              ? ToFutureValue<T, int>(objects, x => x.Count())
                              : ToFutureValue<T, int>(objects.Where(predicate), x => x.Count());
            var ordered = (IOrderedQueryable<T>)((predicate == null)
                                                 ? objects
                                                 : objects.Where(predicate));
            if (orderBy.Keys.Count > 0)
            {
                var first = orderBy.First();
                ordered = first.Value
                          ? ordered.OrderBy(first.Key)
                          : ordered.OrderByDescending(first.Key);
                foreach (var pair in orderBy.Skip(1))
                {
                    ordered = pair.Value
                              ? ordered.ThenBy(pair.Key)
                              : ordered.ThenByDescending(pair.Key);
                }
            }
            var paged = ordered.Skip(startRowIndex).Take(pageSize).ToFuture().ToList();
            totalRecords = futureCount.Value;
            return paged;
        }

        public IQueryable<T> GetAsQueryable<T>(Expression<Func<T, bool>> predicate = null, bool cacheQuery = true)
        {
            SetCurrentActionTo(RepositoryAction.GET);
            if (predicate?.Body.NodeType == ExpressionType.Constant
                    && (((ConstantExpression)predicate.Body)).Value != null)
            {
                var val = (bool)(((ConstantExpression)predicate.Body)).Value;
                if (val)
                {
                    predicate = null;
                }
                else
                {
                    // If the predicate returns false then return empty resultset
                    RestoreLastAction();
                    return Enumerable.Empty<T>().AsQueryable();
                }
            }
            var query = GetMainQuery<T>();
            if (predicate != null)
            {
                query = query.Where(predicate);
            }
            if (cacheQuery)
            {
                query = query.WithOptions(options => options.SetCacheable(true));
            }
            RestoreLastAction();
            return query;
        }

        public List<T> Get<T>(Expression<Func<T, bool>> predicate, bool cacheQuery = true)
        {
            var list = GetAsQueryable(predicate, cacheQuery).ToList();
            list = AppendPendingInsertions(predicate, list);
            list = RemovePendingDeletions(predicate, list);
            return list;
        }

        public int? GetCount<T>(Expression<Func<T, bool>> predicate = null, bool cacheQuery = true)
        {
            return GetAsQueryable(predicate, cacheQuery).Count()
                   + GetItemsToAppend(predicate).Count()
                   - GetItemsToRemove(predicate).Count();
        }

        public List<T> GetAll<T>(bool cacheQuery = true)
        {
            return Get<T>(null, cacheQuery);
        }

        public List<T> GetAll<T>(int startRowIndex, int pageSize, out int totalRecords, bool cacheQuery = true)
        {
            SetCurrentActionTo(RepositoryAction.GET);
            var items = GetMainQuery<T>();
            if (cacheQuery)
            {
                items = items.WithOptions(options => options.SetCacheable(true));
            }
            var futureCount = ToFutureValue<T, int>(items, x => x.Count());
            var paged = items.Skip(startRowIndex).Take(pageSize).ToFuture().ToList();
            totalRecords = futureCount.Value;
            RestoreLastAction();
            return paged;
        }

        public IQueryable<T> GetMainQuery<T>()
        {
            return ApplyReadFilter(_currentSession.Query<T>());
        }

        #endregion

        #region Helper Methods
        private static readonly FieldInfo _insertionsFieldInfo = typeof(ActionQueue).GetField("insertions", BindingFlags.NonPublic | BindingFlags.Instance);
        private List<T> AppendPendingInsertions<T>(Expression<Func<T, bool>> predicate, List<T> list = null)
        {
            if (list == null)
            {
                list = new List<T>();
            }
            if (!_sessionManager.WillFlush || !(((NHibernate.Impl.SessionImpl)_currentSession).ActionQueue).AreInsertionsOrDeletionsQueued)
                return list;
            var itemsToAppend = GetItemsToAppend(predicate);
            var items = itemsToAppend.ToList();
            if (!items.Any()) return list;
            if (!items.Any())
            {
                list = items;
            }
            if (list.Count > items.Count)
            {
                list.AddRange(items);
            }
            else
            {
                items.AddRange(list);
                list = items;
            }
            return list;
        }

        private static readonly FieldInfo _deletionsFieldInfo = typeof(ActionQueue).GetField("deletions", BindingFlags.NonPublic | BindingFlags.Instance);
        private List<T> RemovePendingDeletions<T>(Expression<Func<T, bool>> predicate, List<T> list = null)
        {
            if (list == null)
            {
                list = new List<T>();
            }
            if (list.Count == 0)
            {
                return list;
            }
            if (!_sessionManager.WillFlush || !(((NHibernate.Impl.SessionImpl)_currentSession).ActionQueue).AreInsertionsOrDeletionsQueued)
                return list;
            var itemsToRemove = GetItemsToRemove(predicate);
            foreach (var item in itemsToRemove)
            {
                if (list.Contains(item))
                {
                    list.Remove(item);
                }
            }
            return list;
        }

        private IQueryable<T> GetItemsToAppend<T>(Expression<Func<T, bool>> predicate)
        {
            if (_insertionsFieldInfo == null)
            {
                throw new ApplicationException("Could not find `insertions` field in NH Session's Action Queue!");
            }
            var insertions = (List<AbstractEntityInsertAction>)_insertionsFieldInfo.GetValue(((NHibernate.Impl.SessionImpl)_currentSession).ActionQueue);
            var itemsToAppend
                = insertions
                  .Cast<EntityInsertAction>()
                  .Where(a => a.EntityName == typeof(T).FullName)
                  .Select(a => (T)a.Instance)
                  .AsQueryable();
            if (predicate != null)
            {
                itemsToAppend = itemsToAppend.Where(predicate);
            }
            return itemsToAppend;
        }

        private IQueryable<T> GetItemsToRemove<T>(Expression<Func<T, bool>> predicate)
        {
            if (_deletionsFieldInfo == null)
            {
                throw new ApplicationException("Could not find `deletions` field in NH Session's Action Queue!");
            }
            var deletions = (List<EntityDeleteAction>) _deletionsFieldInfo.GetValue(((NHibernate.Impl.SessionImpl) _currentSession).ActionQueue);
            var itemsToRemove
                = deletions
                  .Where(a => a.EntityName == typeof (T).FullName)
                  .Select(a => (T) a.Instance)
                  .AsQueryable();
            if (predicate != null)
            {
                itemsToRemove = itemsToRemove.Where(predicate);
            }
            return itemsToRemove;
        }

        public void Evict(object obj)
        {
            _currentSession.Evict(obj);
        }

        private IQueryable<T> ApplyReadFilter<T>(IQueryable<T> query)
        {
            return query;
        }


        private bool CanReadInstance<T>(T instance)
        {
            if (instance == null) return true;
            var tmpList = new List<T> { instance };
            tmpList = ApplyReadFilter(tmpList.AsQueryable()).ToList();
            return tmpList.Any();
        }

        #endregion
    }
}