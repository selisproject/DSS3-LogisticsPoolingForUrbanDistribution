// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using Iesi.Collections;
using log4net;
using NHibernate.Event;
using NHibernate.Util;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using DSS3_LogisticsPoolingForUrbanDistribution.BO;

namespace DSS3_LogisticsPoolingForUrbanDistribution.DAL
{
    public class OnDeleteListener : IDeleteEventListener
    {
        public System.Threading.Tasks.Task OnDeleteAsync(DeleteEvent @event, CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.Run(() => OnDelete(@event), cancellationToken);
        }

        public System.Threading.Tasks.Task OnDeleteAsync(DeleteEvent @event, ISet<object> transientEntities, CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.Run(() => OnDelete(@event, transientEntities), cancellationToken);
        }

        public void OnDelete(DeleteEvent @event)
        {
            OnDelete(@event, new IdentitySet());
        }

        public void OnDelete(DeleteEvent @event, ISet<object> transientEntities)
        {
            var entity = @event.Entity;
            System.Type entityType = entity.GetType();
            if (entityType.AssemblyQualifiedName.IndexOf("ProxyAssembly", StringComparison.OrdinalIgnoreCase) > -1)
            {
                entityType = entityType.BaseType;
            }
            try
            {
                switch (entity.GetType().FullName)
                {
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment":
                    (new Repository()).DeleteShipment((DSS3_LogisticsPoolingForUrbanDistribution.BO.Shipment)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.ShipmentStatus":
                    (new Repository()).DeleteShipmentStatus((DSS3_LogisticsPoolingForUrbanDistribution.BO.ShipmentStatus)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Point":
                    (new Repository()).DeletePoint((DSS3_LogisticsPoolingForUrbanDistribution.BO.Point)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Driver":
                    (new Repository()).DeleteDriver((DSS3_LogisticsPoolingForUrbanDistribution.BO.Driver)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder":
                    (new Repository()).DeleteShippingOrder((DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.StatusEvolution":
                    (new Repository()).DeleteStatusEvolution((DSS3_LogisticsPoolingForUrbanDistribution.BO.StatusEvolution)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Volume":
                    (new Repository()).DeleteVolume((DSS3_LogisticsPoolingForUrbanDistribution.BO.Volume)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.ItemType":
                    (new Repository()).DeleteItemType((DSS3_LogisticsPoolingForUrbanDistribution.BO.ItemType)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Priority":
                    (new Repository()).DeletePriority((DSS3_LogisticsPoolingForUrbanDistribution.BO.Priority)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Status":
                    (new Repository()).DeleteStatus((DSS3_LogisticsPoolingForUrbanDistribution.BO.Status)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Location":
                    (new Repository()).DeleteLocation((DSS3_LogisticsPoolingForUrbanDistribution.BO.Location)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Coordinates":
                    (new Repository()).DeleteCoordinates((DSS3_LogisticsPoolingForUrbanDistribution.BO.Coordinates)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Supplier":
                    (new Repository()).DeleteSupplier((DSS3_LogisticsPoolingForUrbanDistribution.BO.Supplier)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Reason":
                    (new Repository()).DeleteReason((DSS3_LogisticsPoolingForUrbanDistribution.BO.Reason)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Condition":
                    (new Repository()).DeleteCondition((DSS3_LogisticsPoolingForUrbanDistribution.BO.Condition)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.LegVolumeDetails":
                    (new Repository()).DeleteLegVolumeDetails((DSS3_LogisticsPoolingForUrbanDistribution.BO.LegVolumeDetails)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.PathVolumeDetail":
                    (new Repository()).DeletePathVolumeDetail((DSS3_LogisticsPoolingForUrbanDistribution.BO.PathVolumeDetail)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.CostSplit":
                    (new Repository()).DeleteCostSplit((DSS3_LogisticsPoolingForUrbanDistribution.BO.CostSplit)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.StatusRule":
                    (new Repository()).DeleteStatusRule((DSS3_LogisticsPoolingForUrbanDistribution.BO.StatusRule)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Vehicule":
                    (new Repository()).DeleteVehicule((DSS3_LogisticsPoolingForUrbanDistribution.BO.Vehicule)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.DistanceCosts":
                    (new Repository()).DeleteDistanceCosts((DSS3_LogisticsPoolingForUrbanDistribution.BO.DistanceCosts)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.TimeCosts":
                    (new Repository()).DeleteTimeCosts((DSS3_LogisticsPoolingForUrbanDistribution.BO.TimeCosts)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.OwnershipCost":
                    (new Repository()).DeleteOwnershipCost((DSS3_LogisticsPoolingForUrbanDistribution.BO.OwnershipCost)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.PropulsionTypeCost":
                    (new Repository()).DeletePropulsionTypeCost((DSS3_LogisticsPoolingForUrbanDistribution.BO.PropulsionTypeCost)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.OilType":
                    (new Repository()).DeleteOilType((DSS3_LogisticsPoolingForUrbanDistribution.BO.OilType)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.AmortizationType":
                    (new Repository()).DeleteAmortizationType((DSS3_LogisticsPoolingForUrbanDistribution.BO.AmortizationType)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumePerShipper":
                    (new Repository()).DeleteVolumePerShipper((DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumePerShipper)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.CO2PerCarrier":
                    (new Repository()).DeleteCO2PerCarrier((DSS3_LogisticsPoolingForUrbanDistribution.BO.CO2PerCarrier)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.CustomVolume":
                    (new Repository()).DeleteCustomVolume((DSS3_LogisticsPoolingForUrbanDistribution.BO.CustomVolume)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumeComponent":
                    (new Repository()).DeleteVolumeComponent((DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumeComponent)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumeComposition":
                    (new Repository()).DeleteVolumeComposition((DSS3_LogisticsPoolingForUrbanDistribution.BO.VolumeComposition)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Solution":
                    (new Repository()).DeleteSolution((DSS3_LogisticsPoolingForUrbanDistribution.BO.Solution)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Route":
                    (new Repository()).DeleteRoute((DSS3_LogisticsPoolingForUrbanDistribution.BO.Route)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Activity":
                    (new Repository()).DeleteActivity((DSS3_LogisticsPoolingForUrbanDistribution.BO.Activity)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.TblZslNormalisationSuggestion":
                    (new Repository()).DeleteTblZslNormalisationSuggestion((DSS3_LogisticsPoolingForUrbanDistribution.BO.TblZslNormalisationSuggestion)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslBookingType":
                    (new Repository()).DeletetblZslBookingType((DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslBookingType)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslCarrier":
                    (new Repository()).DeletetblZslCarrier((DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslCarrier)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslCustomer":
                    (new Repository()).DeletetblZslCustomer((DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslCustomer)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslDeliveryStatus":
                    (new Repository()).DeletetblZslDeliveryStatus((DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslDeliveryStatus)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslPlatformBookingOrder":
                    (new Repository()).DeletetblZslPlatformBookingOrder((DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslPlatformBookingOrder)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslRoute":
                    (new Repository()).DeletetblZslRoute((DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslRoute)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportDetail":
                    (new Repository()).DeletetblZslTransportDetail((DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportDetail)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportEvent":
                    (new Repository()).DeletetblZslTransportEvent((DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportEvent)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportExecutionPlan":
                    (new Repository()).DeletetblZslTransportExecutionPlan((DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportExecutionPlan)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportOrder":
                    (new Repository()).DeletetblZslTransportOrder((DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslTransportOrder)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslWorker":
                    (new Repository()).DeletetblZslWorker((DSS3_LogisticsPoolingForUrbanDistribution.BO.tblZslWorker)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Comment":
                    (new Repository()).DeleteComment((DSS3_LogisticsPoolingForUrbanDistribution.BO.Comment)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderStatistics":
                    (new Repository()).DeleteOrderStatistics((DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderStatistics)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP":
                    (new Repository()).DeleteLSP((DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.LSPUser":
                    (new Repository()).DeleteLSPUser((DSS3_LogisticsPoolingForUrbanDistribution.BO.LSPUser)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderWMS":
                    (new Repository()).DeleteOrderWMS((DSS3_LogisticsPoolingForUrbanDistribution.BO.OrderWMS)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Warehouse":
                    (new Repository()).DeleteWarehouse((DSS3_LogisticsPoolingForUrbanDistribution.BO.Warehouse)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.ProofOfDelivery":
                    (new Repository()).DeleteProofOfDelivery((DSS3_LogisticsPoolingForUrbanDistribution.BO.ProofOfDelivery)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent":
                    (new Repository()).DeleteRegionalAgent((DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgentUser":
                    (new Repository()).DeleteRegionalAgentUser((DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgentUser)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.GeoCoordinates":
                    (new Repository()).DeleteGeoCoordinates((DSS3_LogisticsPoolingForUrbanDistribution.BO.GeoCoordinates)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.GeoArea":
                    (new Repository()).DeleteGeoArea((DSS3_LogisticsPoolingForUrbanDistribution.BO.GeoArea)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckDriver":
                    (new Repository()).DeleteTruckDriver((DSS3_LogisticsPoolingForUrbanDistribution.BO.TruckDriver)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.Truck":
                    (new Repository()).DeleteTruck((DSS3_LogisticsPoolingForUrbanDistribution.BO.Truck)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.OrdersPerMonth":
                    (new Repository()).DeleteOrdersPerMonth((DSS3_LogisticsPoolingForUrbanDistribution.BO.OrdersPerMonth)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.ChartWorkaround":
                    (new Repository()).DeleteChartWorkaround((DSS3_LogisticsPoolingForUrbanDistribution.BO.ChartWorkaround)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.MapPoints":
                    (new Repository()).DeleteMapPoints((DSS3_LogisticsPoolingForUrbanDistribution.BO.MapPoints)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.AVGTime":
                    (new Repository()).DeleteAVGTime((DSS3_LogisticsPoolingForUrbanDistribution.BO.AVGTime)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.StatePeriod":
                    (new Repository()).DeleteStatePeriod((DSS3_LogisticsPoolingForUrbanDistribution.BO.StatePeriod)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate":
                    (new Repository()).DeleteScheduledRouteTemplate((DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRouteTemplate)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRoute":
                    (new Repository()).DeleteScheduledRoute((DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRoute)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract":
                    (new Repository()).DeleteWorkContract((DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction":
                    (new Repository()).DeleteApplicationUserAction((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserAction)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile":
                    (new Repository()).DeleteApplicationUserExternalProfile((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserExternalProfile)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting":
                    (new Repository()).DeleteApplicationSetting((zAppDev.DotNet.Framework.Identity.Model.ApplicationSetting)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUser":
                    (new Repository()).DeleteApplicationUser((zAppDev.DotNet.Framework.Identity.Model.ApplicationUser)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationRole":
                    (new Repository()).DeleteApplicationRole((zAppDev.DotNet.Framework.Identity.Model.ApplicationRole)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation":
                    (new Repository()).DeleteApplicationOperation((zAppDev.DotNet.Framework.Identity.Model.ApplicationOperation)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission":
                    (new Repository()).DeleteApplicationPermission((zAppDev.DotNet.Framework.Identity.Model.ApplicationPermission)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationClient":
                    (new Repository()).DeleteApplicationClient((zAppDev.DotNet.Framework.Identity.Model.ApplicationClient)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin":
                    (new Repository()).DeleteApplicationUserLogin((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserLogin)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim":
                    (new Repository()).DeleteApplicationUserClaim((zAppDev.DotNet.Framework.Identity.Model.ApplicationUserClaim)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ProfileSetting":
                    (new Repository()).DeleteProfileSetting((zAppDev.DotNet.Framework.Identity.Model.ProfileSetting)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.Profile":
                    (new Repository()).DeleteProfile((zAppDev.DotNet.Framework.Identity.Model.Profile)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage":
                    (new Repository()).DeleteApplicationLanguage((zAppDev.DotNet.Framework.Identity.Model.ApplicationLanguage)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat":
                    (new Repository()).DeleteDateTimeFormat((zAppDev.DotNet.Framework.Identity.Model.DateTimeFormat)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme":
                    (new Repository()).DeleteApplicationTheme((zAppDev.DotNet.Framework.Identity.Model.ApplicationTheme)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.FileData":
                    (new Repository()).DeleteFileData((DSS3_LogisticsPoolingForUrbanDistribution.BO.FileData)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration":
                    (new Repository()).DeleteAuditEntityConfiguration((zAppDev.DotNet.Framework.Auditing.Model.AuditEntityConfiguration)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration":
                    (new Repository()).DeleteAuditPropertyConfiguration((zAppDev.DotNet.Framework.Auditing.Model.AuditPropertyConfiguration)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry":
                    (new Repository()).DeleteAuditLogEntry((zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntry)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType":
                    (new Repository()).DeleteAuditLogEntryType((zAppDev.DotNet.Framework.Auditing.Model.AuditLogEntryType)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType":
                    (new Repository()).DeleteAuditLogPropertyActionType((zAppDev.DotNet.Framework.Auditing.Model.AuditLogPropertyActionType)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Workflow.WorkflowContextBase":
                    (new Repository()).DeleteWorkflowContextBase((zAppDev.DotNet.Framework.Workflow.WorkflowContextBase)entity, true, true, null);
                    break;
                case "zAppDev.DotNet.Framework.Workflow.WorkflowSchedule":
                    (new Repository()).DeleteWorkflowSchedule((zAppDev.DotNet.Framework.Workflow.WorkflowSchedule)entity, true, true, null);
                    break;
                case "DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkflowSockContext":
                    (new Repository()).DeleteWorkflowSockContext((DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkflowSockContext)entity, true, true, null);
                    break;
                }
            }
            catch (Exception e)
            {
                (LogManager.GetLogger(this.GetType())).Error("Error deleting: " + entityType.FullName, e);
                throw;
            }
        }
    }
}
