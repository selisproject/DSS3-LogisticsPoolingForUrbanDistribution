// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS3_LogisticsPoolingForUrbanDistribution.BO;
using DSS3_LogisticsPoolingForUrbanDistribution.BoTesting.Tests.Common;
using DSS3_LogisticsPoolingForUrbanDistribution.DAL;

namespace DSS3_LogisticsPoolingForUrbanDistribution.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for WorkContractTest and is intended
    ///to contain all WorkContractTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("WorkContract Repository Tests")]
    [Category("WorkContract Repository Tests")]
    internal class WorkContractTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `WorkContract`")]
        [Order(0)]
        public void WorkContract_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _workcontract_regionalagent_workcontract = new DSS3_LogisticsPoolingForUrbanDistribution.BO.RegionalAgent
            {
                AgencyCode = "RegionalAgent_AgencyCode",
                AgencyDescription = "RegionalAgent_AgencyDescription",
                AgencyAddress = "RegionalAgent_AgencyAddress",
                IsSelected = true,
                Rating = 7607,
            };
            var _workcontract_scheduledroutes_workcontract = new DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRoute
            {
                Origin = "ScheduledRoute_Origin",
                Destination = "ScheduledRoute_Destination",
                DaysOfWeek = "ScheduledRoute_DaysOfWeek",
                PricePerPallet = 222222.22M,
                PricePerKilogram = 222222.22M,
                PricePerCubicMeter = 222222.22M,
                TotalAvailableCapacityKG = 222222.22M,
                EffectiveFrom = now,
                EffectiveTo = now,
                Revision = 248,
                GUID = "ScheduledRoute_GUID",
                ReservedCapacityLaden = 6260,
                BaseId = 440,
                TotalAvailableCapacityM3 = 222222.22M,
                TotalAvailableCapacityLaden = 1650,
                ReservedCapacityKG = 222222.22M,
                ReservedCapacityM3 = 222222.22M,
                FixedPrice = 222222.22M,
                OriginComments = "ScheduledRoute_OriginComments",
                DestinationComments = "ScheduledRoute_DestinationComments",
                TruckPlate = "ScheduledRoute_TruckPlate",
                DeliveryDate = now,
            };
            var _workcontract_scheduledroutes_workcontract2 = new DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRoute
            {
                Origin = "ScheduledRoute_Origin",
                Destination = "ScheduledRoute_Destination",
                DaysOfWeek = "ScheduledRoute_DaysOfWeek",
                PricePerPallet = 222222.22M,
                PricePerKilogram = 222222.22M,
                PricePerCubicMeter = 222222.22M,
                TotalAvailableCapacityKG = 222222.22M,
                EffectiveFrom = now,
                EffectiveTo = now,
                Revision = 2434,
                GUID = "ScheduledRoute_GUID",
                ReservedCapacityLaden = 710,
                BaseId = 4463,
                TotalAvailableCapacityM3 = 222222.22M,
                TotalAvailableCapacityLaden = 3119,
                ReservedCapacityKG = 222222.22M,
                ReservedCapacityM3 = 222222.22M,
                FixedPrice = 222222.22M,
                OriginComments = "ScheduledRoute_OriginComments",
                DestinationComments = "ScheduledRoute_DestinationComments",
                TruckPlate = "ScheduledRoute_TruckPlate",
                DeliveryDate = now,
            };
            var _workcontract_lsp_workcontracts = new DSS3_LogisticsPoolingForUrbanDistribution.BO.LSP
            {
                LSPName = "LSP_LSPName",
                LSPDescription = "LSP_LSPDescription",
            };
            new PersistenceSpecification<DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract>(Session)
            .CheckProperty(p => p.CreationDate, now)
            .CheckProperty(p => p.LastUpdate, now)
            .CheckReference(p => p.RegionalAgent, _workcontract_regionalagent_workcontract)
            .CheckBag(p => p.ScheduledRoutes, (new List<DSS3_LogisticsPoolingForUrbanDistribution.BO.ScheduledRoute>
            {
                _workcontract_scheduledroutes_workcontract,
                _workcontract_scheduledroutes_workcontract2
            }))
            .CheckReference(p => p.LSP, _workcontract_lsp_workcontracts)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `WorkContract`")]
        [Order(1)]
        public void WorkContract_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS3_LogisticsPoolingForUrbanDistribution.BO.WorkContract>(
                              a => true
                              && a.CreationDate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.LastUpdate.GetValueOrDefault().Date <= DateTime.UtcNow.Date
                              && a.Status == DSS3_LogisticsPoolingForUrbanDistribution.BO.ContractStatus.UnderNegotiation
                              && a.RegionalAgent != null
                              && a.ScheduledRoutes.Any()
                              && a.LSP != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}