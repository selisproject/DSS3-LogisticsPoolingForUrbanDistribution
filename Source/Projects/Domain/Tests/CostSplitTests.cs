// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS3_LogisticsPoolingForUrbanDistribution.BO;
using DSS3_LogisticsPoolingForUrbanDistribution.BoTesting.Tests.Common;
using DSS3_LogisticsPoolingForUrbanDistribution.DAL;

namespace DSS3_LogisticsPoolingForUrbanDistribution.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for CostSplitTest and is intended
    ///to contain all CostSplitTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("CostSplit Repository Tests")]
    [Category("CostSplit Repository Tests")]
    internal class CostSplitTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `CostSplit`")]
        [Order(0)]
        public void CostSplit_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _utilsbo_orders_costsplit = new DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder
            {
                DepartureDate = now,
                ArrivalDate = now,
                Shipper = "ShippingOrder_Shipper",
                Carrier = "ShippingOrder_Carrier",
                ItemDescription = "ShippingOrder_ItemDescription",
                Conditions = "ShippingOrder_Conditions",
                AggregateVolume = 222222.22M,
                Priority = 5744,
            };
            var _utilsbo_orders_costsplit2 = new DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder
            {
                DepartureDate = now,
                ArrivalDate = now,
                Shipper = "ShippingOrder_Shipper",
                Carrier = "ShippingOrder_Carrier",
                ItemDescription = "ShippingOrder_ItemDescription",
                Conditions = "ShippingOrder_Conditions",
                AggregateVolume = 222222.22M,
                Priority = 3557,
            };
            new PersistenceSpecification<DSS3_LogisticsPoolingForUrbanDistribution.BO.CostSplit>(Session)
            .CheckProperty(p => p.Cost, 222222.22M)
            .CheckProperty(p => p.Shipper, "CostSplit_Shipper")
            .CheckProperty(p => p.StandAloneCost, 222222.22M)
            .CheckBag(p => p.Orders, (new List<DSS3_LogisticsPoolingForUrbanDistribution.BO.ShippingOrder>
            {
                _utilsbo_orders_costsplit,
                _utilsbo_orders_costsplit2
            }))
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `CostSplit`")]
        [Order(1)]
        public void CostSplit_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS3_LogisticsPoolingForUrbanDistribution.BO.CostSplit> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS3_LogisticsPoolingForUrbanDistribution.BO.CostSplit>(
                              a => true
                              && (a.Cost + 123 > 0)
                              && (a.Shipper != string.Empty && a.Shipper != null)
                              && (a.StandAloneCost + 123 > 0)
                              && a.Orders.Any()
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}