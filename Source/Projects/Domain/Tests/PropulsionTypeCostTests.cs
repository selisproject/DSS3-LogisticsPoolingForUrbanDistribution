// Copyright (c) CLMS. All rights reserved.
// Licensed under the AGPL-3.0 license. See LICENSE file in the project root for full license information.
// This source file was autogenerated by zAppDev(r).

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using FluentNHibernate.Testing;
using DSS3_LogisticsPoolingForUrbanDistribution.BO;
using DSS3_LogisticsPoolingForUrbanDistribution.BoTesting.Tests.Common;
using DSS3_LogisticsPoolingForUrbanDistribution.DAL;

namespace DSS3_LogisticsPoolingForUrbanDistribution.BoTesting.Tests
{
    /// <summary>
    ///This is a test class for PropulsionTypeCostTest and is intended
    ///to contain all PropulsionTypeCostTest NUnit Tests
    ///</summary>
    [TestFixture]
    [Description("PropulsionTypeCost Repository Tests")]
    [Category("PropulsionTypeCost Repository Tests")]
    internal class PropulsionTypeCostTests : NHibernateFixture
    {
        /// <summary>
        ///A test for testing the persistence of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the persistence of `PropulsionTypeCost`")]
        [Order(0)]
        public void PropulsionTypeCost_persistence_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var _vehiculebo_oiltype_propulsiontypecost = new DSS3_LogisticsPoolingForUrbanDistribution.BO.OilType
            {
                Oil = "OilType_Oil",
            };
            new PersistenceSpecification<DSS3_LogisticsPoolingForUrbanDistribution.BO.PropulsionTypeCost>(Session)
            .CheckProperty(p => p.Cost, 222222.22M)
            .CheckProperty(p => p.AverageConsumption, 222222.22M)
            .CheckProperty(p => p.Percentage, 222222.22M)
            .CheckReference(p => p.OilType, _vehiculebo_oiltype_propulsiontypecost)
            .VerifyTheMappings();
        }

        /// <summary>
        ///A test for testing the filtering of an object from Db
        ///</summary>
        [Test]
        [Description("This tests the filtering of `PropulsionTypeCost`")]
        [Order(1)]
        public void PropulsionTypeCost_filtering_test()
        {
            DateTime now = DateTime.Now;
            // Get datetime without milliseconds
            now = new DateTime(now.Ticks - (now.Ticks % TimeSpan.TicksPerSecond), now.Kind);
            var repo = new Repository(Session);
            List<DSS3_LogisticsPoolingForUrbanDistribution.BO.PropulsionTypeCost> results = null;
            Assert.DoesNotThrow(() =>
            {
                results = repo.GetAsQueryable<DSS3_LogisticsPoolingForUrbanDistribution.BO.PropulsionTypeCost>(
                              a => true
                              && (a.Cost + 123 > 0)
                              && (a.AverageConsumption + 123 > 0)
                              && (a.Percentage + 123 > 0)
                              && a.OilType != null
                              ,
                              cacheQuery: true)
                          .OrderBy(a => a)
                          .Skip(0)
                          .Take(3)
                          .ToList();
            });
            Assert.AreNotEqual(null, results);
        }
    }
}